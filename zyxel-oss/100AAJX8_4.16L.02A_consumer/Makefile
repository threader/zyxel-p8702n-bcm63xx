#***********************************************************************
#
#  Copyright (c) 2004  Broadcom Corporation
#  All Rights Reserved
#
#***********************************************************************/

# Top-level Makefile

###########################################
#
# This is the most important target: make all
# This is the first target in the Makefile, so it is also the default target.
# All the other targets are later in this file.
#
############################################

all: prebuild_checks all_postcheck1

all_postcheck1: profile_saved_check sanity_check \
     create_install pinmuxcheck kernelbuild modbuild kernelbuildlite \
     userspace gdbserver dectd hosttools buildimage

############################################################################
#
# A lot of the stuff in the original Makefile has been moved over
# to make.common.
#
############################################################################
BUILD_DIR = $(shell pwd)
include $(BUILD_DIR)/make.common

############################################################################
#
# Make info for voice has been moved over to make.voice
#
############################################################################
ifneq ($(strip $(BUILD_VODSL)),)
include $(BUILD_DIR)/make.voice
endif

############################################################################
#
# Make info for RDPA simulator and auto-generated code
#
############################################################################
ifneq ($(strip $(BUILD_RDPA)),)
-include $(BUILD_DIR)/make.rdpa_sim
endif

############################################################################
#
# dsl, kernel defines
#
############################################################################

ifeq ($(strip $(BRCM_KERNEL_DEBUG)),y) 
KERNEL_DEBUG=1
endif

ifeq ($(strip $(BRCM_KERNEL_KALLSYMS)),y) 
KERNEL_KALLSYMS=1
endif

#Set up ADSL standard
export ADSL=$(BRCM_ADSL_STANDARD)

#Set up ADSL_PHY_MODE  {file | obj}
export ADSL_PHY_MODE=file

#Set up ADSL_SELF_TEST
export ADSL_SELF_TEST=$(BRCM_ADSL_SELF_TEST)

#Set up ADSL_PLN_TEST
export ADSL_PLN_TEST=$(BUILD_TR69_XBRCM)

#WL command
ifneq ($(strip $(WL)),)
build_nop:=$(shell cd $(BUILD_DIR)/userspace/private/apps/wlan; make clean; cd $(BUILD_DIR))
export WL

SVN_IMPL:=$(patsubst IMPL%,%,$(WL))
export SVN_IMPL
#SVNTAG command
ifneq ($(strip $(SVNTAG)),)
WL_BASE := $(BUILD_DIR)/bcmdrivers/broadcom/net/wl
SVNTAG_DIR := $(shell if [ -d $(WL_BASE)/$(SVNTAG)/src ]; then echo 1; else echo 0; fi)
ifeq ($(strip $(SVNTAG_DIR)),1)
$(shell ln -sf $(WL_BASE)/$(SVNTAG)/src $(WL_BASE)/impl$(SVN_IMPL))
else
$(error There is no directory $(WL_BASE)/$(SVNTAG)/src)
endif
endif

endif

ifneq ($(strip $(BRCM_DRIVER_WIRELESS_USBAP)),)
    WLBUS ?= "usbpci"
endif
#default WLBUS for wlan pci driver
WLBUS ?="pci"
export WLBUS                                                                              

#IMAGE_VERSION:=$(BRCM_VERSION)$(BRCM_RELEASE)$(shell echo $(BRCM_EXTRAVERSION) | sed -e "s/\(0\)\([1-9]\)/\2/")$(shell echo $(PROFILE) | sed -e "s/^[0-9]*//")$(shell date '+%j%H%M')

ifneq ($(IMAGE_VERSION_STRING),)
    IMAGE_VERSION:=$(IMAGE_VERSION_STRING)
else
    IMAGE_VERSION:=$(BRCM_VERSION)$(BRCM_RELEASE)$(shell echo $(BRCM_EXTRAVERSION) | sed -e "s/\(0\)\([1-9]\)/\2/")$(shell echo $(PROFILE) | sed -e "s/^[0-9]*//")$(shell date '+%j%H%M')
endif




############################################################################
#
# When there is a directory name with the same name as a Make target,
# make gets confused.  PHONY tells Make to ignore the directory when
# trying to make these targets.
#
############################################################################
.PHONY: userspace unittests data-model hostTools kernellinks



############################################################################
#
# Other Targets. The default target is "all", defined at the top of the file.
#
############################################################################

#
# create a bcm_relversion.h which has our release version number, e.g.
# 4 10 02.  This allows device drivers which support multiple releases
# with a single driver image to test for version numbers.
#
BCM_SWVERSION_FILE := $(KERNEL_DIR)/include/linux/bcm_swversion.h
BCM_VERSION_LEVEL := $(strip $(BRCM_VERSION))
BCM_RELEASE_LEVEL := $(strip $(BRCM_RELEASE))
BCM_RELEASE_LEVEL := $(shell echo $(BCM_RELEASE_LEVEL) | sed -e 's/^0*//')
BCM_PATCH_LEVEL := $(strip $(shell echo $(BRCM_EXTRAVERSION) | cut -c1-2))
BCM_PATCH_LEVEL := $(shell echo $(BCM_PATCH_LEVEL) | sed -e 's/^0*//')

$(BCM_SWVERSION_FILE): $(BUILD_DIR)/version.make
	@echo "creating bcm release version header file"
	@echo "/* this file is automatically generated from top level Makefile */" > $(BCM_SWVERSION_FILE)
	@echo "#ifndef __BCM_SWVERSION_H__" >> $(BCM_SWVERSION_FILE)
	@echo "#define __BCM_SWVERSION_H__" >> $(BCM_SWVERSION_FILE)
	@echo "#define BCM_REL_VERSION $(BCM_VERSION_LEVEL)" >> $(BCM_SWVERSION_FILE)
	@echo "#define BCM_REL_RELEASE $(BCM_RELEASE_LEVEL)" >> $(BCM_SWVERSION_FILE)
	@echo "#define BCM_REL_PATCH $(BCM_PATCH_LEVEL)" >> $(BCM_SWVERSION_FILE)
	@echo "#define BCM_SW_VERSIONCODE ($(BCM_VERSION_LEVEL)*65536+$(BCM_RELEASE_LEVEL)*256+$(BCM_PATCH_LEVEL))" >> $(BCM_SWVERSION_FILE)
	@echo "#define BCM_SW_VERSION(a,b,c) (((a) << 16) + ((b) << 8) + (c))" >> $(BCM_SWVERSION_FILE)
	@echo "#endif" >> $(BCM_SWVERSION_FILE)

ifneq ($(PROFILE_KERNEL_VER),LINUX_2_6_30_RT)
BCM_KF_TXT_FILE := $(BUILD_DIR)/kernel/BcmKernelFeatures.txt
BCM_KF_KCONFIG_FILE := $(KERNEL_DIR)/Kconfig.bcm_kf
MAKEFNOTES_PL := $(HOSTTOOLS_DIR)/makefpatch/makefnotes.pl

havefeatures := $(wildcard $(BCM_KF_TXT_FILE))

ifneq ($(strip $(havefeatures)),)
$(BCM_KF_KCONFIG_FILE) : $(BCM_KF_TXT_FILE)
	perl $(MAKEFNOTES_PL) -kconfig -fl $(BCM_KF_TXT_FILE) > $(BCM_KF_KCONFIG_FILE)
endif

kernelbuild: $(BCM_KF_KCONFIG_FILE)

endif


userspace: sanity_check create_install data-model $(BCM_SWVERSION_FILE) kernellinks
	@echo "MAKING USERSPACE"
	$(MAKE) -j $(ACTUAL_MAX_JOBS) -C userspace
	
ifneq ($(strip $(BUILD_MSTC_MODIFY)),)
#__MSTC__, Nick Tseng, GUI Debug Mode with FTP
httpd: sanity_check create_install data-model
	$(MAKE) -C $(BUILD_DIR)/userspace/private/apps/httpd
endif

#
# Always run Make in the libcreduction directory.  In most non-voice configs,
# mklibs.py will be invoked to analyze user applications
# and libraries to eliminate unused functions thereby reducing image size.
# However, for voice configs, gdb server, oprofile and maybe some other
# special cases, the libcreduction makefile will just copy unstripped
# system libraries to fs.install for inclusion in the image.
#
libcreduction:
	$(MAKE) -C hostTools/libcreduction install



menuconfig:
	@cd $(INC_KERNEL_BASE); \
	$(MAKE) -C $(HOSTTOOLS_DIR)/scripts/lxdialog HOSTCC=gcc
	$(CONFIG_SHELL) $(HOSTTOOLS_DIR)/scripts/Menuconfig $(TARGETS_DIR)/config.in $(PROFILE)


#
# the userspace apps and libs make their own directories before
# they install, so they don't depend on this target to make the
# directory for them anymore.
#
create_install:
		mkdir -p $(PROFILE_DIR)/fs.install/etc
		mkdir -p $(PROFILE_DIR)/fs.install/etc/wlan
		mkdir -p $(INSTALL_DIR)/bin
		mkdir -p $(INSTALL_DIR)/lib
		mkdir -p $(INSTALL_DIR)/etc/snmp
		mkdir -p $(INSTALL_DIR)/etc/iproute2
		mkdir -p $(INSTALL_DIR)/opt/bin
		mkdir -p $(INSTALL_DIR)/opt/modules
		mkdir -p $(INSTALL_DIR)/opt/scripts


# By default, let make spawn 1 job per core.
# To set max jobs, specify on command line, BRCM_MAX_JOBS=8
# To also specify a max load, BRCM_MAX_JOBS="6 --max-load=3.0"
# To specify max load without max jobs, BRCM_MAX_JOBS=" --max-load=3.5"
ifneq ($(strip $(BRCM_MAX_JOBS)),)
ACTUAL_MAX_JOBS := $(BRCM_MAX_JOBS)
else
NUM_CORES := $(shell grep processor /proc/cpuinfo | wc -l)
ACTUAL_MAX_JOBS := $(NUM_CORES)
endif

kernellinks: $(KERNEL_INCLUDE_LINK) $(KERNEL_MIPS_INCLUDE_LINK) $(KERNEL_ARM_INCLUDE_LINK)

$(KERNEL_INCLUDE_LINK):
	ln -s -f $(KERNEL_DIR)/include $(KERNEL_INCLUDE_LINK);

$(KERNEL_MIPS_INCLUDE_LINK):
	ln -s -f $(KERNEL_DIR)/arch/mips/include $(KERNEL_MIPS_INCLUDE_LINK);

$(KERNEL_ARM_INCLUDE_LINK):
	ln -s -f $(KERNEL_DIR)/arch/arm/include $(KERNEL_ARM_INCLUDE_LINK);

define pre_kernelbuild
	@echo
	@echo -------------------------------------------
	@echo ... starting kernel build at $(KERNEL_DIR)
        @echo KERNEL_CHECK_FILE is $(KERNEL_CHECK_FILE)
        @echo PROFILE_KERNEL_VER is $(PROFILE_KERNEL_VER)
	@cd $(INC_KERNEL_BASE); \
	if [ ! -e $(KERNEL_DIR)/$(KERNEL_CHECK_FILE) ]; then \
	  echo "Untarring original Linux kernel source: $(LINUX_ZIP_FILE)"; \
	  (tar xkfpj $(LINUX_ZIP_FILE) 2> /dev/null || true); \
	fi
	$(GENDEFCONFIG_CMD) $(PROFILE_PATH) ${MAKEFLAGS}
	cd $(KERNEL_DIR); \
	cp -f $(KERNEL_DIR)/arch/$(ARCH)/defconfig $(KERNEL_DIR)/.config; \
	$(MAKE) oldconfig;
endef

kernelbuild: kernellinks $(BCM_SWVERSION_FILE)
	$(call pre_kernelbuild)
	cd $(KERNEL_DIR); $(MAKE) -j $(ACTUAL_MAX_JOBS)

kernel_config_test:
	@echo
	@echo "Building $(DIR)/config_$(PROFILE)";
	$(call pre_kernelbuild)
	-@mkdir $(DIR) 2> /dev/null || true
	sort $(KERNEL_DIR)/.config | grep -v "^\#.*$$" | grep -v "^[[:space:]]*$$" > $(DIR)/config_$(PROFILE)
	@echo "  ... done building $(DIR)/config_$(PROFILE)";

.PHONY: kernel_config_test

kernel: sanity_check create_install kernelbuild hosttools buildimage

ifeq ($(strip $(BRCM_DRIVER_BCMDSP)),m)
kernelbuildlite:
	@echo "******************** Kernel Build Lite ********************";
	$(BRCMDRIVERS_DIR)/broadcom/char/dspapp/impl1/getDspModSizes.sh  $(BRCMDRIVERS_DIR)/broadcom/char/dspapp/impl1/dspdd.ko $(SHARED_DIR) $(CROSS_COMPILE) $(KERNEL_DEBUG) $(KERNEL_KALLSYMS);
	cd $(KERNEL_DIR); $(MAKE)
	@echo "******************** Kernel Build Lite DONE ********************";
else
kernelbuildlite:
	@echo "******************** Kernel Build Lite ********************"
	@echo "Nothing to do... "
	@echo "******************** Kernel Build Lite DONE ********************"
endif

ifeq ($(strip $(VOXXXLOAD)),1)
modbuild: touch_voice_files 
	@echo "******************** Starting modbuild (VOXXXLOAD) ********************";
	cd $(KERNEL_DIR); $(MAKE) modules && $(MAKE) modules_install
	@echo "******************** DONE modbuild (VOXXXLOAD) ********************";
else
modbuild:
	@echo "******************** Starting modbuild ********************";
	cd $(KERNEL_DIR); $(MAKE) -j $(ACTUAL_MAX_JOBS) modules && $(MAKE) modules_install
	@echo "******************** DONE modbuild ********************";
endif

mocamodbuild:
	cd $(KERNEL_DIR); $(MAKE) M=$(INC_MOCACFGDRV_PATH) modules 
mocamodclean:
	cd $(KERNEL_DIR); $(MAKE) M=$(INC_MOCACFGDRV_PATH) clean

adslmodbuild:
	cd $(KERNEL_DIR); $(MAKE) M=$(INC_ADSLDRV_PATH) modules 
adslmodbuildclean:
	cd $(KERNEL_DIR); $(MAKE) M=$(INC_ADSLDRV_PATH) clean

spumodbuild:
	cd $(KERNEL_DIR); $(MAKE) M=$(INC_SPUDRV_PATH) modules
spumodbuildclean:
	cd $(KERNEL_DIR); $(MAKE) M=$(INC_SPUDRV_PATH) clean

pwrmngtmodbuild:
	cd $(KERNEL_DIR); $(MAKE) M=$(INC_PWRMNGTDRV_PATH) modules
pwrmngtmodclean:
	cd $(KERNEL_DIR); $(MAKE) M=$(INC_PWRMNGTDRV_PATH) clean

enetmodbuild:
	cd $(KERNEL_DIR); $(MAKE) M=$(INC_ENETDRV_PATH) modules
enetmodclean:
	cd $(KERNEL_DIR); $(MAKE) M=$(INC_ENETDRV_PATH) clean

eponmodbuild:
	cd $(KERNEL_DIR); $(MAKE) M=$(INC_EPONDRV_PATH) modules
eponmodclean:
	cd $(KERNEL_DIR); $(MAKE) M=$(INC_EPONDRV_PATH) clean


modules: sanity_check create_install modbuild kernelbuildlite hosttools buildimage

adslmodule: adslmodbuild
adslmoduleclean: adslmodbuildclean

spumodule: spumodbuild
spumoduleclean: spumodbuildclean

pwrmngtmodule: pwrmngtmodbuild
pwrmngtmoduleclean: pwrmngtmodclean

ifneq ($(strip $(BUILD_MSTC_MODIFY)),)
vendorname := $(subst ",,$(MSTC_VENDOR_NAME))
data-model:
ifneq ($(strip $(MSTC_VENDOR_NAME)),)
ifneq ($(strip $(MSTC_VENDOR_NAME)), "")
	@ sed -i '/<parameter name="X_5067F0_SambaHostName"/s/\(defaultValue=".*\)\([z,Z][y,Y][x,X][e,E][l,L]\)\(.*\)/\1$(vendorname)\3/g' data-model/cms-data-model.xml
	@ sed -i '/<parameter name="X_5067F0_SambaHostName"/s/\(defaultValue=".*\)\([m,M][i,I][t,T][r,R][a,A][s,S][t,T][a,A][r,R]\)\(.*\)/\1$(vendorname)\3/g' data-model/cms-data-model.xml
	@ sed -i '/<parameter name="Manufacturer"/s/\(defaultValue=".*\)\([z,Z][y,Y][x,X][e,E][l,L]\)\(.*\)/\1$(vendorname)\3/g' data-model/cms-data-model.xml
	@ sed -i '/<parameter name="Manufacturer"/s/\(defaultValue=".*\)\([m,M][i,I][t,T][r,R][a,A][s,S][t,T][a,A][r,R]\)\(.*\)/\1$(vendorname)\3/g' data-model/cms-data-model.xml
	@ sed = data-model/cms-data-model.xml | sed -n 'N; s/\(<object name="\)\(.*\)\([z,Z][y,Y][x,X][e,E][l,L]\)\(.*\)\(" shortObjectName.*\)/[Warning: Please avoid use "\3" for Object naming.] \2\3\4/p'
	@ sed = data-model/cms-data-model.xml | sed -n 'N; s/\(<object name="\)\(.*\)\([m,M][i,I][t,T][r,R][a,A][s,S][t,T][a,A][r,R]\)\(.*\)\(" shortObjectName.*\)/[Warning: Please avoid use "\3" for Object naming.] \2\3\4/p'
	@ sed = data-model/cms-data-model.xml | sed -n 'N; s/\(  <parameter name="\)\(.*\)\([z,Z][y,Y][x,X][e,E][l,L]\)\(.*\)\(" type.*\)/[Warning: Please avoid use "\3" for Parameter naming.] \2\3\4/p'
	@ sed = data-model/cms-data-model.xml | sed -n 'N; s/\(  <parameter name="\)\(.*\)\([m,M][i,I][t,T][r,R][a,A][s,S][t,T][a,A][r,R]\)\(.*\)\(" type.*\)/[Warning: Please avoid use "\3" for Parameter naming.] \2\3\4/p'
	@ sed = data-model/cms-data-model.xml | sed -n 'N; s/\(  <parameter name="\)\([^"]*\)\(.*\)\(defaultValue="\)\(.*\)\([z,Z][y,Y][x,X][e,E][l,L]\)\([^"]*\)\(.*\)/[Warning: Please avoid assign Default Value with "\6" to Parameter \2.] \5\6\7/p'
	@ sed = data-model/cms-data-model.xml | sed -n 'N; s/\(  <parameter name="\)\([^"]*\)\(.*\)\(defaultValue="\)\(.*\)\([m,M][i,I][t,T][r,R][a,A][s,S][t,T][a,A][r,R]\)\([^"]*\)\(.*\)/[Warning: Please avoid assign Default Value with "\6" to Parameter \2.] \5\6\7/p'
	@ echo "Finish Wording Check for data-model."
	@ read -p "Press ENTER to continue or CTRL-C to abort. " resp
endif
endif	
	$(MAKE) MSTC_PARAM_ORIGINAL_PREFIX=$(MSTC_PARAM_ORIGINAL_PREFIX) MSTC_PARAM_REPLACE_WITH=$(MSTC_PARAM_REPLACE_WITH) -C data-model
else
data-model:
	$(MAKE) -C data-model
endif

unittests:
	$(MAKE) -C unittests

unittests_run:
	$(MAKE) -C unittests unittests_run

doxygen_build:
	$(MAKE) -C hostTools build_doxygen

doxygen_docs: doxygen_build
	rm -rf $(BUILD_DIR)/docs/doxygen;
	mkdir $(BUILD_DIR)/docs/doxygen;
	cd hostTools/doxygen/bin; ./doxygen

doxygen_clean:
	$(MAKE) -C hostTools clean_doxygen


# touch_voice_files doesn't clean up voice, just enables incremental build of voice code
touch_voice_files:
	find bcmdrivers/broadcom/char/endpoint/ \( -name '*.o' -o -name '*.a' -o -name '*.lib' -o -name '*.ko' -o -name '*.cmd' -o -name '.*.cmd' -o -name '*.c' -o -name '*.mod' \) -print -exec rm -f "{}" ";"
	rm -rf $(KERNEL_DIR)/.tmp_versions/endpointdd.mod
	rm -rf $(KERNEL_DIR)/arch/mips/defconfig
	rm -rf $(KERNEL_DIR)/include/config/bcm/endpoint/
	find $(KERNEL_DIR)/lib/ -name '*.o' -print -exec rm -f "{}" ";"
	find $(KERNEL_DIR)/lib/ -name '*.lib' -print -exec rm -f "{}" ";"



############################################################################
#
# Build user applications depending on if they are
# specified in the profile.  Most of these BUILD_ checks should eventually get
# moved down to the userspace directory.
#
############################################################################

ifneq ($(strip $(BUILD_VCONFIG)),)
export BUILD_VCONFIG=y
endif


ifneq ($(strip $(BUILD_GDBSERVER)),)
gdbserver:
	install -m 755 $(TOOLCHAIN_TOP)/usr/$(TOOLCHAIN_PREFIX)/target_utils/gdbserver $(INSTALL_DIR)/bin
else
gdbserver:
endif

ifneq ($(strip $(BUILD_ETHWAN)),)
export BUILD_ETHWAN=y
endif

ifneq ($(strip $(BUILD_SNMP)),)

ifneq ($(strip $(BUILD_SNMP_SET)),)
export SNMP_SET=1
else
export SNMP_SET=0
endif

ifneq ($(strip $(BUILD_SNMP_ADSL_MIB)),)
export SNMP_ADSL_MIB=1
else
export SNMP_ADSL_MIB=0
endif

ifneq ($(strip $(BUILD_SNMP_ATM_MIB)),)
export SNMP_ATM_MIB=1
else
export SNMP_ATM_MIB=0
endif

ifneq ($(strip $(BUILD_SNMP_BRIDGE_MIB)),)
export SNMP_BRIDGE_MIB=1
else
export SNMP_BRIDGE_MIB=0
endif

ifneq ($(strip $(BUILD_SNMP_AT_MIB)),)
export SNMP_AT_MIB=1
else
export SNMP_AT_MIB=0
endif

ifneq ($(strip $(BUILD_SNMP_SYSOR_MIB)),)
export SNMP_SYSOR_MIB=1
else
export SNMP_SYSOR_MIB=0
endif

ifneq ($(strip $(BUILD_SNMP_TCP_MIB)),)
export SNMP_TCP_MIB=1
else
export SNMP_TCP_MIB=0
endif

ifneq ($(strip $(BUILD_SNMP_UDP_MIB)),)
export SNMP_UDP_MIB=1
else
export SNMP_UDP_MIB=0
endif

ifneq ($(strip $(BUILD_SNMP_IP_MIB)),)
export SNMP_IP_MIB=1
else
export SNMP_IP_MIB=0
endif

ifneq ($(strip $(BUILD_SNMP_ICMP_MIB)),)
export SNMP_ICMP_MIB=1
else
export SNMP_ICMP_MIB=0
endif

ifneq ($(strip $(BUILD_SNMP_SNMP_MIB)),)
export SNMP_SNMP_MIB=1
else
export SNMP_SNMP_MIB=0
endif

ifneq ($(strip $(BUILD_SNMP_ATMFORUM_MIB)),)
export SNMP_ATMFORUM_MIB=1
else
export SNMP_ATMFORUM_MIB=0
endif


ifneq ($(strip $(BUILD_SNMP_CHINA_TELECOM_CPE_MIB)),)
export BUILD_SNMP_CHINA_TELECOM_CPE_MIB=y
endif

ifneq ($(strip $(BUILD_CT_1_39_OPEN)),)
export BUILD_CT_1_39_OPEN=y
endif

ifneq ($(strip $(BUILD_SNMP_CHINA_TELECOM_CPE_MIB_V2)),)
export BUILD_SNMP_CHINA_TELECOM_CPE_MIB_V2=y
endif

ifneq ($(strip $(BUILD_SNMP_BRCM_CPE_MIB)),)
export BUILD_SNMP_BRCM_CPE_MIB=y
endif

ifneq ($(strip $(BUILD_SNMP_UDP)),)
export BUILD_SNMP_UDP=y
endif

ifneq ($(strip $(BUILD_SNMP_EOC)),)
export BUILD_SNMP_EOC=y
endif

ifneq ($(strip $(BUILD_SNMP_AAL5)),)
export BUILD_SNMP_AAL5=y
endif

ifneq ($(strip $(BUILD_SNMP_AUTO)),)
export BUILD_SNMP_AUTO=y
endif

ifneq ($(strip $(BUILD_SNMP_DEBUG)),)
export BUILD_SNMP_DEBUG=y
endif

ifneq ($(strip $(BUILD_SNMP_TRANSPORT_DEBUG)),)
export BUILD_SNMP_TRANSPORT_DEBUG=y
endif

ifneq ($(strip $(BUILD_SNMP_LAYER_DEBUG)),)
export BUILD_SNMP_LAYER_DEBUG=y
endif

endif

ifneq ($(strip $(BUILD_4_LEVEL_QOS)),)
export BUILD_4_LEVEL_QOS=y
endif


# vodsl (voice daemon)
# mwang: for now, I still need to leave vodsl at this top level because
# it depends on so many of the voice defines in this top level Makefile.

ifneq ($(strip $(BUILD_MSTC_MODIFY)),)
ifneq ($(strip $(BUILD_VODSL)),)
zyims: sanity_check
	$(MAKE) -C $(BUILD_DIR)/userspace/MSTC/ZyIMS
else
zyims: sanity_check
	@echo "skipping zyims (not configured)"
endif
else
ifneq ($(strip $(BUILD_VODSL)),)
vodsl: sanity_check
	$(MAKE) -C $(BUILD_DIR)/userspace/private/apps/vodsl $(BUILD_VODSL)
else
vodsl: sanity_check
	@echo "skipping vodsl (not configured)"
endif
endif

#dectd
ifneq ($(strip $(BUILD_DECT)),)
dectd: sanity_check
	$(MAKE) -C $(BUILD_DIR)/userspace/private/apps/dectd dynamic
else
dectd: sanity_check
	@echo "Skipping dectd application (not configured)"
endif

# Leave it for the future when soap server is decoupled from cfm
ifneq ($(strip $(BUILD_SOAP)),)
ifeq ($(strip $(BUILD_SOAP_VER)),2)
soapserver:
	$(MAKE) -C $(BROADCOM_DIR)/SoapToolkit/SoapServer $(BUILD_SOAP)
else
soap:
	$(MAKE) -C $(BROADCOM_DIR)/soap $(BUILD_SOAP)
endif
else
soap:
endif



ifneq ($(strip $(BUILD_DIAGAPP)),)
diagapp:
	$(MAKE) -C $(BROADCOM_DIR)/diagapp $(BUILD_DIAGAPP)
else
diagapp:
endif



ifneq ($(strip $(BUILD_IPPD)),)
ippd:
	$(MAKE) -C $(BROADCOM_DIR)/ippd $(BUILD_IPPD)
else
ippd:
endif


ifneq ($(strip $(BUILD_PORT_MIRRORING)),)
export BUILD_PORT_MIRRORING=1
else
export BUILD_PORT_MIRRORING=0
endif

ifeq ($(BRCM_USE_SUDO_IFNOT_ROOT),y)
BRCM_BUILD_USR=$(shell whoami)
BRCM_BUILD_USR1=$(shell sudo touch foo;ls -l foo | awk '{print $$3}';sudo rm -rf foo)
else
BRCM_BUILD_USR=root
endif

ifeq ($(strip $(MSTC_TE_ATTE)),y)
SMTBAK = $(TARGETS_DIR)/$(PROFILE)/SMT_BAK
endif

hosttools:
	$(MAKE) -C $(HOSTTOOLS_DIR)
ifeq ($(strip $(MSTC_TE_ATTE)),y)
ifneq ($(findstring _$(strip $(BRCM_KERNEL_ROOTFS))_,_all_ _jffs2_),)
	cp $(HOSTTOOLS_DIR)/bcmZyNandImageBuilder $(SMTBAK)/bcmZyNandImageBuilder
	cp $(HOSTTOOLS_DIR)/createZyNandimg $(SMTBAK)/createZyNandimg
	cp $(HOSTTOOLS_DIR)/NANDimg_gen $(SMTBAK)/NANDimg_gen
	cp $(HOSTTOOLS_DIR)/CompressConfig $(SMTBAK)/CompressConfig_RAS
endif
endif

hosttools_nandcfe:
	$(MAKE) -C $(HOSTTOOLS_DIR) mkjffs2 build_imageutil build_cmplzma build_secbtutils


############################################################################
#
# IKOS defines
#
############################################################################

CMS_VERSION_FILE=$(BUILD_DIR)/userspace/public/include/version.h

ifeq ($(strip $(BRCM_IKOS)),y)
FS_COMPRESSION=-noD -noI -no-fragments
else
FS_COMPRESSION=
endif

export BRCM_IKOS FS_COMPRESSION



# IKOS Emulator build that does not include the CFE boot loader.
# Edit targets/ikos/ikos and change the chip and board id to desired values.
# Then build: make PROFILE=ikos ikos
ikos:
	@echo -e '#define SOFTWARE_VERSION ""\n#define RELEASE_VERSION ""\n#define PSI_VERSION ""\n' > $(CMS_VERSION_FILE)
	@-mv -f $(FSSRC_DIR)/etc/profile $(FSSRC_DIR)/etc/profile.dontuse >& /dev/null
	@-mv -f $(FSSRC_DIR)/etc/init.d $(FSSRC_DIR)/etc/init.dontuse >& /dev/null
	@-mv -f $(FSSRC_DIR)/etc/inittab $(FSSRC_DIR)/etc/inittab.dontuse >& /dev/null
	@sed -e 's/^::respawn.*sh.*/::respawn:-\/bin\/sh/' $(FSSRC_DIR)/etc/inittab.dontuse > $(FSSRC_DIR)/etc/inittab
	@if [ ! -a $(CFE_FILE) ] ; then echo "no cfe" > $(CFE_FILE); echo "no cfe" > $(CFE_FILE).del; fi
	@-rm $(HOSTTOOLS_DIR)/bcmImageBuilder >& /dev/null
	$(MAKE) PROFILE=$(PROFILE)
	@-rm $(HOSTTOOLS_DIR)/bcmImageBuilder >& /dev/null
	@mv -f $(FSSRC_DIR)/etc/profile.dontuse $(FSSRC_DIR)/etc/profile
	@-mv -f $(FSSRC_DIR)/etc/init.dontuse $(FSSRC_DIR)/etc/init.d >& /dev/null
	@-mv -f $(FSSRC_DIR)/etc/inittab.dontuse $(FSSRC_DIR)/etc/inittab >& /dev/null
	@cd $(PROFILE_DIR); \
	$(OBJCOPY) --output-target=srec vmlinux vmlinux.srec; \
	xxd $(FS_KERNEL_IMAGE_NAME) | grep "^00000..:" | xxd -r > bcmtag.bin; \
	$(OBJCOPY) --output-target=srec --input-target=binary --change-addresses=0xb8010000 bcmtag.bin bcmtag.srec; \
	$(OBJCOPY) --output-target=srec --input-target=binary --change-addresses=0xb8010100 rootfs.img rootfs.srec; \
	rm bcmtag.bin; \
	grep -v "^S7" vmlinux.srec > bcm9$(BRCM_CHIP)_$(PROFILE).srec; \
	grep "^S3" bcmtag.srec >> bcm9$(BRCM_CHIP)_$(PROFILE).srec; \
	grep -v "^S0" rootfs.srec >> bcm9$(BRCM_CHIP)_$(PROFILE).srec
	@if [ ! -a $(CFE_FILE).del ] ; then rm -f $(CFE_FILE) $(CFE_FILE).del; fi
	@echo -e "\nAn image without CFE for the IKOS emulator has been built.  It is named"
	@echo -e "targets/$(PROFILE)/bcm9$(BRCM_CHIP)_$(PROFILE).srec\n"

# IKOS Emulator build that includes the CFE boot loader.
# Both Linux and CFE boot loader toolchains need to be installed.
# Edit targets/ikos/ikos and change the chip and board id to desired values.
# Then build: make PROFILE=ikos ikoscfe
ikoscfe:
	@echo -e '#define SOFTWARE_VERSION ""\n#define RELEASE_VERSION ""\n#define PSI_VERSION ""\n' > $(CMS_VERSION_FILE)
	@-mv -f $(FSSRC_DIR)/etc/profile $(FSSRC_DIR)/etc/profile.dontuse >& /dev/null
	$(MAKE) PROFILE=$(PROFILE)
	@mv -f $(FSSRC_DIR)/etc/profile.dontuse $(FSSRC_DIR)/etc/profile
	$(MAKE) -C $(BL_BUILD_DIR) clean
	$(MAKE) -C $(BL_BUILD_DIR)
	$(MAKE) -C $(BL_BUILD_DIR) ikos_finish
	cd $(PROFILE_DIR); \
	echo -n "** no kernel  **" > kernelfile; \
	$(HOSTTOOLS_DIR)/bcmImageBuilder $(BRCM_ENDIAN_FLAGS) --output $(CFE_FS_KERNEL_IMAGE_NAME) --chip $(BRCM_CHIP) --board $(BRCM_BOARD_ID) --blocksize $(BRCM_FLASHBLK_SIZE) --cfefile $(BL_BUILD_DIR)/cfe$(BRCM_CHIP).bin --rootfsfile rootfs.img --kernelfile kernelfile --include-cfe; \
ifeq ($(strip $(BUILD_MSTC_MODIFY)),y)
	$(HOSTTOOLS_DIR)/createimg --endian $(ARCH_ENDIAN) --boardid=$(BRCM_BOARD_ID) --voiceboardid=$(BRCM_VOICE_BOARD_ID) --numbermac=$(BRCM_NUM_MAC_ADDRESSES) --macaddr=$(BRCM_BASE_MAC_ADDRESS) --tp=$(BRCM_MAIN_TP_NUM) --psisize=$(BRCM_PSI_SIZE) --inputfile=$(CFE_FS_KERNEL_IMAGE_NAME) --outputfile=$(FLASH_IMAGE_NAME); \
else
	$(HOSTTOOLS_DIR)/createimg --endian $(ARCH_ENDIAN) --boardid=$(BRCM_BOARD_ID) --voiceboardid $(BRCM_VOICE_BOARD_ID) --numbermac=$(BRCM_NUM_MAC_ADDRESSES) --macaddr=$(BRCM_BASE_MAC_ADDRESS) --tp=$(BRCM_MAIN_TP_NUM) --psisize=$(BRCM_PSI_SIZE) --inputfile=$(CFE_FS_KERNEL_IMAGE_NAME) --outputfile=$(FLASH_IMAGE_NAME); \
endif
	$(HOSTTOOLS_DIR)/addvtoken --endian $(ARCH_ENDIAN) $(FLASH_IMAGE_NAME) $(FLASH_IMAGE_NAME).w; \
	$(OBJCOPY) --output-target=srec --input-target=binary --change-addresses=0xb8000000 $(FLASH_IMAGE_NAME).w $(FLASH_IMAGE_NAME).srec; \
	$(OBJCOPY) --output-target=srec vmlinux vmlinux.srec; \
	@rm kernelfile; \
	grep -v "^S7" vmlinux.srec > bcm9$(BRCM_CHIP)_$(PROFILE).srec; \
	grep "^S3" $(BL_BUILD_DIR)/cferam$(BRCM_CHIP).srec >> bcm9$(BRCM_CHIP)_$(PROFILE).srec; \
	grep -v "^S0" $(FLASH_IMAGE_NAME).srec >> bcm9$(BRCM_CHIP)_$(PROFILE).srec; \
	grep -v "^S7" vmlinux.srec > bcm9$(BRCM_CHIP)_$(PROFILE).utram.srec; \
	grep -v "^S0" $(BL_BUILD_DIR)/cferam$(BRCM_CHIP).srec >> bcm9$(BRCM_CHIP)_$(PROFILE).utram.srec;
	@echo -e "\nAn image with CFE for the IKOS emulator has been built.  It is named"
	@echo -e "targets/$(PROFILE)/bcm9$(BRCM_CHIP)_$(PROFILE).srec"
	@echo -e "\nBefore testing with the IKOS emulator, this build can be unit tested"
	@echo -e "with an existing chip and board as follows."
	@echo -e "1. Flash targets/$(PROFILE)/$(FLASH_IMAGE_NAME).w onto an existing board."
	@echo -e "2. Start the EPI EDB debugger.  At the edbice prompt, enter:"
	@echo -e "   edbice> fr m targets/$(PROFILE)/bcm9$(BRCM_CHIP)_$(PROFILE).utram.srec"
	@echo -e "   edbice> r"
	@echo -e "3. Program execution will start at 0xb8000000 (or 0xbfc00000) and,"
	@echo -e "   if successful, will enter the Linux shell.\n"


############################################################################
#
# Generate the credits
#
############################################################################
gen_credits:
	cd $(RELEASE_DIR); \
	if [ -e gen_credits.pl ]; then \
	  perl gen_credits.pl; \
	fi

############################################################################
#
# PinMuxCheck
#
############################################################################
pinmuxcheck:
ifeq ($(wildcard $(HOSTTOOLS_DIR)/PinMuxCheck/Makefile),)
	@echo "No PinMuxCheck needed"
else
	cd $(HOSTTOOLS_DIR); $(MAKE) build_pinmuxcheck;
endif

ifneq ($(strip $(BUILD_MSTC_MODIFY)),)
############################################################################
#
# SMT_BAK
#
############################################################################
SMT_BAK: hosttools
ifeq ($(strip $(MSTC_TE_ATTE)),y)
	if [ "$(MSTC_TE_ATMC)" = "y" ]; then \
		echo "ERROR: ATTE and ATMC are both enabled together!"; \
		exit 1; \
	fi	
	if [ ! -e $(SMTBAK) ]; then \
		echo "ERROR: There is no SMT_Bak folder found!"; \
		exit 1; \
	fi
	if [ ! -e $(SMTBAK)/GenSMT.bak ]; then \
		echo "ERROR: There is no GenSMT SH bak file found!"; \
		exit 1; \
	fi
	if [ -e $(SMTBAK)/GenSMT.sh ]; then \
		rm $(SMTBAK)/GenSMT.sh; \
	fi

	cp $(DEFAULTCFG_DIR)/$(MSTC_OBM_IMAGE_DEFAULT_FILE) $(SMTBAK)/$(MSTC_OBM_IMAGE_DEFAULT_FILE)
	cp $(SMTBAK)/GenSMT.bak $(SMTBAK)/GenSMT.sh

	echo "echo ********************Generate SMT file BEGIN********************" >> $(SMTBAK)/GenSMT.sh
	echo "./CompressConfig_RAS ./$(MSTC_OBM_IMAGE_DEFAULT_FILE) ./$(MSTC_OBM_IMAGE_DEFAULT_FILE)_COMP" >> $(SMTBAK)/GenSMT.sh
	if [ "$(MSTC_OBM_IMAGE_DEFAULT)" = "y" ]; then \
		if [ "$(MSTC_ROM_D)" = "y" ]; then \
			echo ./bcmZyNandImageBuilder --output $(CFE_FS_KERNEL_IMAGE_NAME)_NAND128_TE --chip $(BRCM_CHIP) --board $(BRCM_BOARD_ID) --internalversion=\"$(MSTC_INTERNAL_VERSION)\" --externalversion=\"$(MSTC_EXTERNAL_VERSION)\" --modelid=$(MSTC_MODEL_ID) --cmodelid=$(MSTC_CUSTOM_MODEL_ID) --cfefile cfe$(BRCM_CHIP)nand128_TE.bin --imgdefaultfile=$(MSTC_OBM_IMAGE_DEFAULT_FILE)_COMP --romdsig $(MSTC_ROM_D_SIG) --romdfile=$(MSTC_ROM_D_FILE) --rootfsfile rootfs128kb.img --include-cfe >> $(SMTBAK)/GenSMT.sh; \
			echo ./createZyNandimg --boardid=$(BRCM_BOARD_ID) --numbermac=$(BRCM_NUM_MAC_ADDRESSES) --macaddr=$(BRCM_BASE_MAC_ADDRESS) --countrycode=$(MSTC_COUNTRY_CODE) --tp=$(BRCM_MAIN_TP_NUM) --psisize=$(BRCM_PSI_SIZE) --gponsn=$(BRCM_GPON_SERIAL_NUMBER) --gponpw=$(BRCM_GPON_PASSWORD) --backuppsi="$(BUILD_BACKUP_PSI)" --inputfile=$(CFE_FS_KERNEL_IMAGE_NAME)_NAND128_TE --outputfile=$(FLASH_IMAGE_NAME)_NAND128_TE >> $(SMTBAK)/GenSMT.sh; \
		else \
			echo ./bcmZyNandImageBuilder --output $(CFE_FS_KERNEL_IMAGE_NAME)_NAND128_TE --chip $(BRCM_CHIP) --board $(BRCM_BOARD_ID) --internalversion=\"$(MSTC_INTERNAL_VERSION)\" --externalversion=\"$(MSTC_EXTERNAL_VERSION)\" --modelid=$(MSTC_MODEL_ID) --cmodelid=$(MSTC_CUSTOM_MODEL_ID) --imgdefaultfile=$(MSTC_OBM_IMAGE_DEFAULT_FILE)_COMP --cfefile cfe$(BRCM_CHIP)nand128_TE.bin --rootfsfile rootfs128kb.img --include-cfe >> $(SMTBAK)/GenSMT.sh; \
			echo ./createZyNandimg --boardid=$(BRCM_BOARD_ID) --numbermac=$(BRCM_NUM_MAC_ADDRESSES) --macaddr=$(BRCM_BASE_MAC_ADDRESS) --countrycode=$(MSTC_COUNTRY_CODE) --tp=$(BRCM_MAIN_TP_NUM) --psisize=$(BRCM_PSI_SIZE) --gponsn=$(BRCM_GPON_SERIAL_NUMBER) --gponpw=$(BRCM_GPON_PASSWORD) --backuppsi="$(BUILD_BACKUP_PSI)" --inputfile=$(CFE_FS_KERNEL_IMAGE_NAME)_NAND128_TE --outputfile=$(FLASH_IMAGE_NAME)_NAND128_TE >> $(SMTBAK)/GenSMT.sh; \
		fi;\
	else \
		if [ "$(MSTC_ROM_D)" = "y" ]; then \
			echo ./bcmZyNandImageBuilder --output $(CFE_FS_KERNEL_IMAGE_NAME)_NAND128_TE --chip $(BRCM_CHIP) --board $(BRCM_BOARD_ID) --internalversion=\"$(MSTC_INTERNAL_VERSION)\" --externalversion=\"$(MSTC_EXTERNAL_VERSION)\" --modelid=$(MSTC_MODEL_ID) --cmodelid=$(MSTC_CUSTOM_MODEL_ID) --cfefile cfe$(BRCM_CHIP)nand128_TE.bin --romdsig $(MSTC_ROM_D_SIG) --romdfile=$(MSTC_ROM_D_FILE) --rootfsfile rootfs128kb.img --include-cfe >> $(SMTBAK)/GenSMT.sh; \
			echo ./createZyNandimg --boardid=$(BRCM_BOARD_ID) --numbermac=$(BRCM_NUM_MAC_ADDRESSES) --macaddr=$(BRCM_BASE_MAC_ADDRESS) --countrycode=$(MSTC_COUNTRY_CODE) --tp=$(BRCM_MAIN_TP_NUM) --psisize=$(BRCM_PSI_SIZE) --gponsn=$(BRCM_GPON_SERIAL_NUMBER) --gponpw=$(BRCM_GPON_PASSWORD) --backuppsi="$(BUILD_BACKUP_PSI)" --inputfile=$(CFE_FS_KERNEL_IMAGE_NAME)_NAND128_TE --outputfile=$(FLASH_IMAGE_NAME)_NAND128_TE >> $(SMTBAK)/GenSMT.sh; \
		else \
			echo ./bcmZyNandImageBuilder --output $(CFE_FS_KERNEL_IMAGE_NAME)_NAND128_TE --chip $(BRCM_CHIP) --board $(BRCM_BOARD_ID) --internalversion=\"$(MSTC_INTERNAL_VERSION)\" --externalversion=\"$(MSTC_EXTERNAL_VERSION)\" --modelid=$(MSTC_MODEL_ID) --cmodelid=$(MSTC_CUSTOM_MODEL_ID) --cfefile cfe$(BRCM_CHIP)nand128_TE.bin --rootfsfile rootfs128kb.img --include-cfe >> $(SMTBAK)/GenSMT.sh; \
			echo ./createZyNandimg --boardid=$(BRCM_BOARD_ID) --numbermac=$(BRCM_NUM_MAC_ADDRESSES) --macaddr=$(BRCM_BASE_MAC_ADDRESS) --countrycode=$(MSTC_COUNTRY_CODE) --tp=$(BRCM_MAIN_TP_NUM) --psisize=$(BRCM_PSI_SIZE) --gponsn=$(BRCM_GPON_SERIAL_NUMBER) --gponpw=$(BRCM_GPON_PASSWORD) --backuppsi="$(BUILD_BACKUP_PSI)" --inputfile=$(CFE_FS_KERNEL_IMAGE_NAME)_NAND128_TE --outputfile=$(FLASH_IMAGE_NAME)_NAND128_TE >> $(SMTBAK)/GenSMT.sh; \
		fi;\
	fi
	if [ "$(MSTC_NAND_BLOCK_16)" = "y" ]; then \
		echo ./NANDimg_gen -v \"$(MSTC_EXTERNAL_VERSION)\" -q 1 -t small -M 1 >> $(SMTBAK)/GenSMT.sh; \
		echo ./NANDimg_gen -f $(FLASH_IMAGE_NAME)_NAND128_TE -v \"$(MSTC_EXTERNAL_VERSION)\" -i $(shell date '+%y%m%d_%H%M') -S 0 -s jffs2 -c on -q 1 -p $(MSTC_NAND_FLASH_SIZE) -t small -o brcom -e 512 -G 50 >> $(SMTBAK)/GenSMT.sh; \
	else \
		echo ./NANDimg_gen -v \"$(MSTC_EXTERNAL_VERSION)\" -q 1 -t large -M 1 >> $(SMTBAK)/GenSMT.sh; \
		echo ./NANDimg_gen -f $(FLASH_IMAGE_NAME)_NAND128_TE -v \"$(MSTC_EXTERNAL_VERSION)\" -i $(shell date '+%y%m%d_%H%M') -S 0 -s jffs2 -c on -q 1 -p $(MSTC_NAND_FLASH_SIZE) -t large -o brcom -e 512 -G 50 >> $(SMTBAK)/GenSMT.sh; \
	fi

	echo cat common_header.img partition_header.img \> product_header.img >> $(SMTBAK)/GenSMT.sh
	echo cat product_header.img partition_image.img \> $(SMT_IMAGE_NAME)_NAND128 >> $(SMTBAK)/GenSMT.sh
	echo cat partition_image.img \> $(SMT_IMAGE_NAME)_NAND128_partition_image >> $(SMTBAK)/GenSMT.sh	
	echo "echo ********************Generate SMT file END********************" >> $(SMTBAK)/GenSMT.sh
	echo "echo ********************Compare SMT file Begin********************" >> $(SMTBAK)/GenSMT.sh
	echo if [ \"$$\(diff ./$(SMT_IMAGE_NAME)_NAND128 ../$(SMT_IMAGE_NAME)_NAND128\)\" = \"\" ]\; then  >> $(SMTBAK)/GenSMT.sh
	echo "echo -e \"\033[32mThe SMT file ./$(SMT_IMAGE_NAME)_NAND128 generated by GenSMT.sh is same as ../$(SMT_IMAGE_NAME)_NAND128\033[0m\"" >> $(SMTBAK)/GenSMT.sh
	echo "else" >> $(SMTBAK)/GenSMT.sh
	echo "echo -e \"\033[33mThe SMT file ./$(SMT_IMAGE_NAME)_NAND128 generated by GenSMT.sh is different as ../$(SMT_IMAGE_NAME)_NAND128\033[0m\"" >> $(SMTBAK)/GenSMT.sh
	echo "fi" >> $(SMTBAK)/GenSMT.sh
	echo "echo ********************Compare SMT file END********************" >> $(SMTBAK)/GenSMT.sh
endif
endif

############################################################################
#
# This is where we build the image
#
############################################################################
ifneq ($(strip $(BUILD_MSTC_MODIFY)),)
#__MSTC__, modify
buildimage: SMT_BAK kernelbuild libcreduction gen_credits buildimage1
buildimage1:
else
buildimage: kernelbuild libcreduction gen_credits
endif
ifneq ($(strip $(BRCM_PERMIT_STDCPP)),)
	@if ls $(PROFILE_DIR)/fs.install/lib/libstdc* 2> /dev/null ; then  \
		echo -e "libstdc++ must be replaced with STLPORT";         \
		echo -e "override with BRCM_PERMIT_STDCPP=1 if ok";         \
		false;                                                     \
	fi
endif
	cd $(TARGETS_DIR); ./buildFS;
ifeq ($(strip $(BRCM_RAMDISK_BOOT_EN)),y)
	cd $(TARGETS_DIR); $(HOSTTOOLS_DIR)/fakeroot/fakeroot ./buildFS_RD
endif
ifneq ($(strip $(BUILD_MSTC_MODIFY)),y)
	cd $(TARGETS_DIR); $(HOSTTOOLS_DIR)/fakeroot/fakeroot ./buildFS2
endif

	@mkdir -p $(IMAGES_DIR)

ifeq ($(strip $(BRCM_KERNEL_ROOTFS)),all)

#----------------------------------------------------------
#MSTC common patch
#----------------------------------------------------------
ifeq ($(strip $(BUILD_MSTC_MODIFY)),y)
# star __MSTC__, RaynorChung: Support 963268, patch form SVN#3597 on http://svn.zyxel.com.tw/svn/CPE_SW1/BCM96368/trunk/P-870HA/branches/cht/fttb8/4.11 
# ZyXEL Autumn
	cp $(KERNEL_DIR)/vmlinux $(PROFILE_DIR)/. ; \
  $(STRIP) --remove-section=.note --remove-section=.comment $(PROFILE_DIR)/vmlinux ; \
	$(OBJCOPY) -O binary $(PROFILE_DIR)/vmlinux $(PROFILE_DIR)/vmlinux.bin ; \
	$(HOSTTOOLS_DIR)/cmplzma -k -2 $(PROFILE_DIR)/vmlinux $(PROFILE_DIR)/vmlinux.bin $(PROFILE_DIR)/vmlinux.lz
# ZyXEL Autumn 128 block don't need seperate bootloader
	@if [ "$(MSTC_NAND_BLOCK_16)" = "y" ]; then \
		cp $(PROFILE_DIR)/../cfe/cfe$(BRCM_CHIP)ram.bin $(TARGET_FS)/cferam.bin ; \
	fi ; \
	cp $(PROFILE_DIR)/vmlinux.lz $(TARGET_FS)/.
# ZyXEL Autumn 128 block don't need seperate bootloader
	@if [ "$(MSTC_NAND_BLOCK_16)" = "y" ]; then \
		echo -e "/cferam.bin" > $(HOSTTOOLS_DIR)/nocomprlist ;\
	fi ;\
	echo -e "/vmlinux.lz" >> $(HOSTTOOLS_DIR)/nocomprlist ; \
#	chmod +w $(TARGET_FS)/etc/fstab ; \
#	chmod -w $(TARGET_FS)/etc/fstab ; \
	chmod 555 $(TARGET_FS)/etc/fstab
# end MTS__, RaynorChung: Support 963268, patch form SVN#3597 on http://svn.zyxel.com.tw/svn/CPE_SW1/BCM96368/trunk/P-870HA/branches/cht/fttb8/4.11 
	cd $(TARGETS_DIR); $(HOSTTOOLS_DIR)/fakeroot/fakeroot ./buildFS2
	
	cp $(PROFILE_DIR)/jffs2_rootfs16kb.img  $(PROFILE_DIR)/rootfs16kb.img
	cp $(PROFILE_DIR)/jffs2_rootfs128kb.img  $(PROFILE_DIR)/rootfs128kb.img
# star __MSTC__, RaynorChung: Support 963268, patch form SVN#3597 on http://svn.zyxel.com.tw/svn/CPE_SW1/BCM96368/trunk/P-870HA/branches/cht/fttb8/4.11 
	@if [ "$(MSTC_NAND_BLOCK_16)" = "y" ]; then \
	cd $(PROFILE_DIR); \
	dd if=/dev/zero of=file128k.tmp bs=1k count=128; \
	cat $(CFE_ROM_FILE) file128k.tmp | head --bytes=$(FLASH_NAND_BLOCK_16KB) > cferom.tmp; \
	cat cferom.tmp rootfs16kb.img > $(FLASH_NAND_RAW_FS_IMAGE_NAME_16); \
	$(HOSTTOOLS_DIR)/addvtoken $(FLASH_NAND_RAW_FS_IMAGE_NAME_16) $(FLASH_NAND_RAW_FS_IMAGE_NAME_16).w; \
	$(HOSTTOOLS_DIR)/addvtoken rootfs16kb.img $(FLASH_NAND_FS_IMAGE_NAME_16).w; \
	rm $(FLASH_NAND_RAW_FS_IMAGE_NAME_16); \
	rm file128k.tmp cferom.tmp; \
	else \
      cd $(PROFILE_DIR); \
      if [ "$(MSTC_OBM_IMAGE_DEFAULT_FILE)" != """" ]; then \
      $(HOSTTOOLS_DIR)/CompressConfig $(DEFAULTCFG_DIR)/$(MSTC_OBM_IMAGE_DEFAULT_FILE) $(PROFILE_DIR)/$(MSTC_OBM_IMAGE_DEFAULT_FILE); \
      fi;\
	if [ $(strip $(MSTC_TE_ATTE)) = y ]; then \
		cp rootfs128kb.img $(SMTBAK)/rootfs128kb.img; \
	fi; \
      if [ "$(MSTC_OBM_IMAGE_DEFAULT)" = "y" ]; then \
      if [ "$(MSTC_ROM_D)" = "y" ]; then \
      $(HOSTTOOLS_DIR)/bcmZyNandImageBuilder --output $(FS_KERNEL_IMAGE_NAME)_NAND128 --chip $(BRCM_CHIP) --board $(BRCM_BOARD_ID) --internalversion=$(MSTC_INTERNAL_VERSION) --externalversion=$(MSTC_EXTERNAL_VERSION) --modelid=$(MSTC_MODEL_ID) --cmodelid=$(MSTC_CUSTOM_MODEL_ID) --cfefile $(CFE_NAND128_FILE) --imgdefaultfile=$(MSTC_OBM_IMAGE_DEFAULT_FILE) --romdsig $(MSTC_ROM_D_SIG) --romdfile=$(MSTC_ROM_D_FILE) --rootfsfile rootfs128kb.img ; \
      $(HOSTTOOLS_DIR)/bcmZyNandImageBuilder --output $(CFE_FS_KERNEL_IMAGE_NAME)_NAND128 --chip $(BRCM_CHIP) --board $(BRCM_BOARD_ID) --internalversion=$(MSTC_INTERNAL_VERSION) --externalversion=$(MSTC_EXTERNAL_VERSION) --modelid=$(MSTC_MODEL_ID) --cmodelid=$(MSTC_CUSTOM_MODEL_ID) --cfefile $(CFE_NAND128_FILE) --imgdefaultfile=$(MSTC_OBM_IMAGE_DEFAULT_FILE) --romdsig $(MSTC_ROM_D_SIG) --romdfile=$(MSTC_ROM_D_FILE) --rootfsfile rootfs128kb.img --include-cfe; \
      $(HOSTTOOLS_DIR)/createZyNandimg --boardid=$(BRCM_BOARD_ID) --voiceboardid=$(BRCM_VOICE_BOARD_ID) --numbermac=$(BRCM_NUM_MAC_ADDRESSES) --macaddr=$(BRCM_BASE_MAC_ADDRESS) --countrycode=$(MSTC_COUNTRY_CODE) --tp=$(BRCM_MAIN_TP_NUM) --psisize=$(BRCM_PSI_SIZE) --gponsn=$(BRCM_GPON_SERIAL_NUMBER) --gponpw=$(BRCM_GPON_PASSWORD) --backuppsi="$(BUILD_BACKUP_PSI)" --inputfile=$(CFE_FS_KERNEL_IMAGE_NAME)_NAND128 --outputfile=$(FLASH_IMAGE_NAME)_NAND128; \
      $(HOSTTOOLS_DIR)/bcmZyNandImageBuilder --output $(CFE_FS_KERNEL_IMAGE_NAME)_NAND128_TE --chip $(BRCM_CHIP) --board $(BRCM_BOARD_ID) --internalversion=$(MSTC_INTERNAL_VERSION) --externalversion=$(MSTC_EXTERNAL_VERSION) --modelid=$(MSTC_MODEL_ID) --cmodelid=$(MSTC_CUSTOM_MODEL_ID) --cfefile $(CFE_NAND128_FILE_TE) --imgdefaultfile=$(MSTC_OBM_IMAGE_DEFAULT_FILE) --romdsig $(MSTC_ROM_D_SIG) --romdfile=$(MSTC_ROM_D_FILE) --rootfsfile rootfs128kb.img --include-cfe; \
      $(HOSTTOOLS_DIR)/createZyNandimg --boardid=$(BRCM_BOARD_ID) --voiceboardid=$(BRCM_VOICE_BOARD_ID) --numbermac=$(BRCM_NUM_MAC_ADDRESSES) --macaddr=$(BRCM_BASE_MAC_ADDRESS) --countrycode=$(MSTC_COUNTRY_CODE) --tp=$(BRCM_MAIN_TP_NUM) --psisize=$(BRCM_PSI_SIZE) --gponsn=$(BRCM_GPON_SERIAL_NUMBER) --gponpw=$(BRCM_GPON_PASSWORD) --backuppsi="$(BUILD_BACKUP_PSI)" --inputfile=$(CFE_FS_KERNEL_IMAGE_NAME)_NAND128_TE --outputfile=$(FLASH_IMAGE_NAME)_NAND128_TE; \
      else \
      $(HOSTTOOLS_DIR)/bcmZyNandImageBuilder --output $(FS_KERNEL_IMAGE_NAME)_NAND128 --chip $(BRCM_CHIP) --board $(BRCM_BOARD_ID) --internalversion=$(MSTC_INTERNAL_VERSION) --externalversion=$(MSTC_EXTERNAL_VERSION) --modelid=$(MSTC_MODEL_ID) --cmodelid=$(MSTC_CUSTOM_MODEL_ID) --imgdefaultfile=$(MSTC_OBM_IMAGE_DEFAULT_FILE) --cfefile $(CFE_NAND128_FILE) --rootfsfile rootfs128kb.img; \
      $(HOSTTOOLS_DIR)/bcmZyNandImageBuilder --output $(CFE_FS_KERNEL_IMAGE_NAME)_NAND128 --chip $(BRCM_CHIP) --board $(BRCM_BOARD_ID) --internalversion=$(MSTC_INTERNAL_VERSION) --externalversion=$(MSTC_EXTERNAL_VERSION) --modelid=$(MSTC_MODEL_ID) --cmodelid=$(MSTC_CUSTOM_MODEL_ID) --imgdefaultfile=$(MSTC_OBM_IMAGE_DEFAULT_FILE) --cfefile $(CFE_NAND128_FILE) --rootfsfile rootfs128kb.img --include-cfe; \
      $(HOSTTOOLS_DIR)/createZyNandimg --boardid=$(BRCM_BOARD_ID) --voiceboardid=$(BRCM_VOICE_BOARD_ID) --numbermac=$(BRCM_NUM_MAC_ADDRESSES) --macaddr=$(BRCM_BASE_MAC_ADDRESS) --countrycode=$(MSTC_COUNTRY_CODE) --tp=$(BRCM_MAIN_TP_NUM) --psisize=$(BRCM_PSI_SIZE) --gponsn=$(BRCM_GPON_SERIAL_NUMBER) --gponpw=$(BRCM_GPON_PASSWORD) --backuppsi="$(BUILD_BACKUP_PSI)" --inputfile=$(CFE_FS_KERNEL_IMAGE_NAME)_NAND128 --outputfile=$(FLASH_IMAGE_NAME)_NAND128; \
      $(HOSTTOOLS_DIR)/bcmZyNandImageBuilder --output $(CFE_FS_KERNEL_IMAGE_NAME)_NAND128_TE --chip $(BRCM_CHIP) --board $(BRCM_BOARD_ID) --internalversion=$(MSTC_INTERNAL_VERSION) --externalversion=$(MSTC_EXTERNAL_VERSION) --modelid=$(MSTC_MODEL_ID) --cmodelid=$(MSTC_CUSTOM_MODEL_ID) --imgdefaultfile=$(MSTC_OBM_IMAGE_DEFAULT_FILE) --cfefile $(CFE_NAND128_FILE_TE) --rootfsfile rootfs128kb.img --include-cfe; \
      $(HOSTTOOLS_DIR)/createZyNandimg --boardid=$(BRCM_BOARD_ID) --voiceboardid=$(BRCM_VOICE_BOARD_ID) --numbermac=$(BRCM_NUM_MAC_ADDRESSES) --macaddr=$(BRCM_BASE_MAC_ADDRESS) --countrycode=$(MSTC_COUNTRY_CODE) --tp=$(BRCM_MAIN_TP_NUM) --psisize=$(BRCM_PSI_SIZE) --gponsn=$(BRCM_GPON_SERIAL_NUMBER) --gponpw=$(BRCM_GPON_PASSWORD) --backuppsi="$(BUILD_BACKUP_PSI)" --inputfile=$(CFE_FS_KERNEL_IMAGE_NAME)_NAND128_TE --outputfile=$(FLASH_IMAGE_NAME)_NAND128_TE; \
      fi;\
      else \
      if [ "$(MSTC_ROM_D)" = "y" ]; then \
      $(HOSTTOOLS_DIR)/bcmZyNandImageBuilder --output $(FS_KERNEL_IMAGE_NAME)_NAND128 --chip $(BRCM_CHIP) --board $(BRCM_BOARD_ID) --internalversion=$(MSTC_INTERNAL_VERSION) --externalversion=$(MSTC_EXTERNAL_VERSION) --modelid=$(MSTC_MODEL_ID) --cmodelid=$(MSTC_CUSTOM_MODEL_ID) --cfefile $(CFE_NAND128_FILE) --romdsig $(MSTC_ROM_D_SIG) --romdfile=$(MSTC_ROM_D_FILE) --rootfsfile rootfs128kb.img ; \
      $(HOSTTOOLS_DIR)/bcmZyNandImageBuilder --output $(CFE_FS_KERNEL_IMAGE_NAME)_NAND128 --chip $(BRCM_CHIP) --board $(BRCM_BOARD_ID) --internalversion=$(MSTC_INTERNAL_VERSION) --externalversion=$(MSTC_EXTERNAL_VERSION) --modelid=$(MSTC_MODEL_ID) --cmodelid=$(MSTC_CUSTOM_MODEL_ID) --cfefile $(CFE_NAND128_FILE) --romdsig $(MSTC_ROM_D_SIG) --romdfile=$(MSTC_ROM_D_FILE) --rootfsfile rootfs128kb.img --include-cfe; \
      $(HOSTTOOLS_DIR)/createZyNandimg --boardid=$(BRCM_BOARD_ID) --voiceboardid=$(BRCM_VOICE_BOARD_ID) --numbermac=$(BRCM_NUM_MAC_ADDRESSES) --macaddr=$(BRCM_BASE_MAC_ADDRESS) --countrycode=$(MSTC_COUNTRY_CODE) --tp=$(BRCM_MAIN_TP_NUM) --psisize=$(BRCM_PSI_SIZE) --gponsn=$(BRCM_GPON_SERIAL_NUMBER) --gponpw=$(BRCM_GPON_PASSWORD) --backuppsi="$(BUILD_BACKUP_PSI)" --inputfile=$(CFE_FS_KERNEL_IMAGE_NAME)_NAND128 --outputfile=$(FLASH_IMAGE_NAME)_NAND128; \
      $(HOSTTOOLS_DIR)/bcmZyNandImageBuilder --output $(CFE_FS_KERNEL_IMAGE_NAME)_NAND128_TE --chip $(BRCM_CHIP) --board $(BRCM_BOARD_ID) --internalversion=$(MSTC_INTERNAL_VERSION) --externalversion=$(MSTC_EXTERNAL_VERSION) --modelid=$(MSTC_MODEL_ID) --cmodelid=$(MSTC_CUSTOM_MODEL_ID) --cfefile $(CFE_NAND128_FILE_TE) --romdsig $(MSTC_ROM_D_SIG) --romdfile=$(MSTC_ROM_D_FILE) --rootfsfile rootfs128kb.img --include-cfe; \
      $(HOSTTOOLS_DIR)/createZyNandimg --boardid=$(BRCM_BOARD_ID) --voiceboardid=$(BRCM_VOICE_BOARD_ID) --numbermac=$(BRCM_NUM_MAC_ADDRESSES) --macaddr=$(BRCM_BASE_MAC_ADDRESS) --countrycode=$(MSTC_COUNTRY_CODE) --tp=$(BRCM_MAIN_TP_NUM) --psisize=$(BRCM_PSI_SIZE) --gponsn=$(BRCM_GPON_SERIAL_NUMBER) --gponpw=$(BRCM_GPON_PASSWORD) --backuppsi="$(BUILD_BACKUP_PSI)" --inputfile=$(CFE_FS_KERNEL_IMAGE_NAME)_NAND128_TE --outputfile=$(FLASH_IMAGE_NAME)_NAND128_TE; \
      else \
      $(HOSTTOOLS_DIR)/bcmZyNandImageBuilder --output $(FS_KERNEL_IMAGE_NAME)_NAND128 --chip $(BRCM_CHIP) --board $(BRCM_BOARD_ID) --internalversion=$(MSTC_INTERNAL_VERSION) --externalversion=$(MSTC_EXTERNAL_VERSION) --modelid=$(MSTC_MODEL_ID) --cmodelid=$(MSTC_CUSTOM_MODEL_ID) --cfefile $(CFE_NAND128_FILE) --rootfsfile rootfs128kb.img; \
      $(HOSTTOOLS_DIR)/bcmZyNandImageBuilder --output $(CFE_FS_KERNEL_IMAGE_NAME)_NAND128 --chip $(BRCM_CHIP) --board $(BRCM_BOARD_ID) --internalversion=$(MSTC_INTERNAL_VERSION) --externalversion=$(MSTC_EXTERNAL_VERSION) --modelid=$(MSTC_MODEL_ID) --cmodelid=$(MSTC_CUSTOM_MODEL_ID) --cfefile $(CFE_NAND128_FILE) --rootfsfile rootfs128kb.img --include-cfe; \
      $(HOSTTOOLS_DIR)/createZyNandimg --boardid=$(BRCM_BOARD_ID) --voiceboardid=$(BRCM_VOICE_BOARD_ID) --numbermac=$(BRCM_NUM_MAC_ADDRESSES) --macaddr=$(BRCM_BASE_MAC_ADDRESS) --countrycode=$(MSTC_COUNTRY_CODE) --tp=$(BRCM_MAIN_TP_NUM) --psisize=$(BRCM_PSI_SIZE) --gponsn=$(BRCM_GPON_SERIAL_NUMBER) --gponpw=$(BRCM_GPON_PASSWORD) --backuppsi="$(BUILD_BACKUP_PSI)" --inputfile=$(CFE_FS_KERNEL_IMAGE_NAME)_NAND128 --outputfile=$(FLASH_IMAGE_NAME)_NAND128; \
      $(HOSTTOOLS_DIR)/bcmZyNandImageBuilder --output $(CFE_FS_KERNEL_IMAGE_NAME)_NAND128_TE --chip $(BRCM_CHIP) --board $(BRCM_BOARD_ID) --internalversion=$(MSTC_INTERNAL_VERSION) --externalversion=$(MSTC_EXTERNAL_VERSION) --modelid=$(MSTC_MODEL_ID) --cmodelid=$(MSTC_CUSTOM_MODEL_ID) --cfefile $(CFE_NAND128_FILE_TE) --rootfsfile rootfs128kb.img --include-cfe; \
      $(HOSTTOOLS_DIR)/createZyNandimg --boardid=$(BRCM_BOARD_ID) --voiceboardid=$(BRCM_VOICE_BOARD_ID) --numbermac=$(BRCM_NUM_MAC_ADDRESSES) --macaddr=$(BRCM_BASE_MAC_ADDRESS) --countrycode=$(MSTC_COUNTRY_CODE) --tp=$(BRCM_MAIN_TP_NUM) --psisize=$(BRCM_PSI_SIZE) --gponsn=$(BRCM_GPON_SERIAL_NUMBER) --gponpw=$(BRCM_GPON_PASSWORD) --backuppsi="$(BUILD_BACKUP_PSI)" --inputfile=$(CFE_FS_KERNEL_IMAGE_NAME)_NAND128_TE --outputfile=$(FLASH_IMAGE_NAME)_NAND128_TE; \
      fi;\
      fi;\
      if [ "$(MSTC_OBM_IMAGE_DEFAULT_FILE)" != """" ]; then \
         rm $(PROFILE_DIR)/$(MSTC_OBM_IMAGE_DEFAULT_FILE); \
      fi;\
      if [ "$(MSTC_NAND_BLOCK_16)" = "y" ]; then \
         $(HOSTTOOLS_DIR)/NANDimg_gen -v $(MSTC_EXTERNAL_VERSION) -q 1 -t small -M 1; \
         $(HOSTTOOLS_DIR)/NANDimg_gen -f $(FLASH_IMAGE_NAME)_NAND128_TE -v $(MSTC_EXTERNAL_VERSION) -i $(shell date '+%y%m%d_%H%M') -S 0 -s jffs2 -c on -q 1 -p $(MSTC_NAND_FLASH_SIZE) -t small -o brcom -e 512 -G 50; \
      else \
         $(HOSTTOOLS_DIR)/NANDimg_gen -v $(MSTC_EXTERNAL_VERSION) -q 1 -t large -M 1; \
         $(HOSTTOOLS_DIR)/NANDimg_gen -f $(FLASH_IMAGE_NAME)_NAND128_TE -v $(MSTC_EXTERNAL_VERSION) -i $(shell date '+%y%m%d_%H%M') -S 0 -s jffs2 -c on -q 1 -p $(MSTC_NAND_FLASH_SIZE) -t large -o brcom -e 512 -G 50; \
      fi ; \
      rm -f $(CFE_FS_KERNEL_IMAGE_NAME)_NAND128_TE; \
      rm -f $(FLASH_IMAGE_NAME)_NAND128_TE; \
      cat common_header.img partition_header.img > product_header.img; \
      cat product_header.img partition_image.img > $(SMT_IMAGE_NAME)_NAND128; \
      cat partition_image.img > $(SMT_IMAGE_NAME)_NAND128_partition_image; \
      rm common_header.img partition_header.img product_header.img partition_image.img; \
      $(HOSTTOOLS_DIR)/addvtoken $(FLASH_IMAGE_NAME)_NAND128 $(FLASH_IMAGE_NAME)_NAND128.w; \
	fi
	@cp $(PROFILE_DIR)/$(FLASH_IMAGE_NAME)_NAND128.w $(IMAGES_DIR)/$(FLASH_IMAGE_NAME)_NAND128_$(BRCM_RELEASETAG)-$(shell date '+%y%m%d_%H%M').w
	@cp $(PROFILE_DIR)/$(FS_KERNEL_IMAGE_NAME)_NAND128 $(IMAGES_DIR)/$(FS_KERNEL_IMAGE_NAME)_NAND128_$(BRCM_RELEASETAG)-$(shell date '+%y%m%d_%H%M')
	@cp $(PROFILE_DIR)/$(FS_KERNEL_IMAGE_NAME)_NAND128 $(IMAGES_DIR)/ras.bin
	@echo
	@echo -e "Done! Image $(PROFILE) has been built in $(PROFILE_DIR)."
# end MTS__, RaynorChung: Support 963268, patch form SVN#3597 on http://svn.zyxel.com.tw/svn/CPE_SW1/BCM96368/trunk/P-870HA/branches/cht/fttb8/4.11 
else
# NAND UBI and JFFS2
ifeq ($(strip $(BUILD_NAND_IMG_BLKSIZE_16KB)),y)
	$(HOSTTOOLS_DIR)/scripts/bcmImageMaker --cferom $(CFE_ROM_FILE) --blocksize $(FLASH_NAND_BLOCK_16KB) --bootofs $(FLASH_BOOT_OFS) --bootsize $(FLASH_NAND_BLOCK_16KB) --rootfs jffs2_rootfs16kb.img --image $(FLASH_NAND_CFEROM_FS_IMAGE_NAME_16)_jffs2 --fsonly $(FLASH_NAND_FS_IMAGE_NAME_16)_jffs2
	$(HOSTTOOLS_DIR)/scripts/bcmImageMaker --cferom $(CFE_ROM_FILE) --blocksize $(FLASH_NAND_BLOCK_16KB) --bootofs $(FLASH_BOOT_OFS) --bootsize $(FLASH_NAND_BLOCK_16KB) --ubifs --bootfs bootfs16kb.img --rootfs ubi_rootfs16kb.img --image $(FLASH_NAND_CFEROM_FS_IMAGE_NAME_16)_ubi --fsonly $(FLASH_NAND_FS_IMAGE_NAME_16)_ubi
endif
ifeq ($(strip $(BUILD_NAND_IMG_BLKSIZE_128KB)),y)
	$(HOSTTOOLS_DIR)/scripts/bcmImageMaker --cferom $(CFE_ROM_FILE) --blocksize $(FLASH_NAND_BLOCK_128KB) --bootofs $(FLASH_BOOT_OFS) --bootsize $(FLASH_NAND_BLOCK_128KB)  --rootfs jffs2_rootfs128kb.img --image $(FLASH_NAND_CFEROM_FS_IMAGE_NAME_128)_jffs2 --fsonly $(FLASH_NAND_FS_IMAGE_NAME_128)_jffs2
	$(HOSTTOOLS_DIR)/scripts/bcmImageMaker --cferom $(CFE_ROM_FILE) --blocksize $(FLASH_NAND_BLOCK_128KB) --bootofs $(FLASH_BOOT_OFS) --bootsize $(FLASH_NAND_BLOCK_128KB)  --ubifs --bootfs bootfs128kb.img --rootfs ubi_rootfs128kb.img --image $(FLASH_NAND_CFEROM_FS_IMAGE_NAME_128)_ubi --fsonly $(FLASH_NAND_FS_IMAGE_NAME_128)_ubi
endif
ifeq ($(strip $(BUILD_NAND_IMG_BLKSIZE_256KB)),y)
	$(HOSTTOOLS_DIR)/scripts/bcmImageMaker --cferom $(CFE_ROM_FILE) --blocksize $(FLASH_NAND_BLOCK_256KB) --bootofs $(FLASH_BOOT_OFS) --bootsize $(FLASH_NAND_BLOCK_256KB)  --rootfs jffs2_rootfs256kb.img --image $(FLASH_NAND_CFEROM_FS_IMAGE_NAME_256)_jffs2 --fsonly $(FLASH_NAND_FS_IMAGE_NAME_256)_jffs2
	$(HOSTTOOLS_DIR)/scripts/bcmImageMaker --cferom $(CFE_ROM_FILE) --blocksize $(FLASH_NAND_BLOCK_256KB) --bootofs $(FLASH_BOOT_OFS) --bootsize $(FLASH_NAND_BLOCK_256KB)  --ubifs --bootfs bootfs256kb.img --rootfs ubi_rootfs256kb.img --image $(FLASH_NAND_CFEROM_FS_IMAGE_NAME_256)_ubi --fsonly $(FLASH_NAND_FS_IMAGE_NAME_256)_ubi
endif
ifeq ($(strip $(BUILD_NAND_IMG_BLKSIZE_512KB)),y)
	$(HOSTTOOLS_DIR)/scripts/bcmImageMaker --cferom $(CFE_ROM_FILE) --blocksize $(FLASH_NAND_BLOCK_512KB) --bootofs $(FLASH_BOOT_OFS) --bootsize $(FLASH_NAND_BLOCK_512KB)  --rootfs jffs2_rootfs512kb.img --image $(FLASH_NAND_CFEROM_FS_IMAGE_NAME_512)_jffs2 --fsonly $(FLASH_NAND_FS_IMAGE_NAME_512)_jffs2
	$(HOSTTOOLS_DIR)/scripts/bcmImageMaker --cferom $(CFE_ROM_FILE) --blocksize $(FLASH_NAND_BLOCK_512KB) --bootofs $(FLASH_BOOT_OFS) --bootsize $(FLASH_NAND_BLOCK_512KB)   --ubifs --bootfs bootfs512kb.img --rootfs ubi_rootfs512kb.img --image $(FLASH_NAND_CFEROM_FS_IMAGE_NAME_512)_ubi --fsonly $(FLASH_NAND_FS_IMAGE_NAME_512)_ubi
endif
ifeq ($(strip $(BUILD_NAND_IMG_BLKSIZE_1024KB)),y)
	$(HOSTTOOLS_DIR)/scripts/bcmImageMaker --cferom $(CFE_ROM_FILE) --blocksize $(FLASH_NAND_BLOCK_1024KB) --bootofs $(FLASH_BOOT_OFS) --bootsize $(FLASH_NAND_BLOCK_1024KB)  --rootfs jffs2_rootfs1024kb.img --image $(FLASH_NAND_CFEROM_FS_IMAGE_NAME_1024)_jffs2 --fsonly $(FLASH_NAND_FS_IMAGE_NAME_1024)_jffs2
	$(HOSTTOOLS_DIR)/scripts/bcmImageMaker --cferom $(CFE_ROM_FILE) --blocksize $(FLASH_NAND_BLOCK_1024KB) --bootofs $(FLASH_BOOT_OFS) --bootsize $(FLASH_NAND_BLOCK_1024KB)   --ubifs --bootfs bootfs1024kb.img --rootfs ubi_rootfs1024kb.img --image $(FLASH_NAND_CFEROM_FS_IMAGE_NAME_1024)_ubi --fsonly $(FLASH_NAND_FS_IMAGE_NAME_1024)_ubi
endif

ifeq ($(strip $(BUILD_SECURE_BOOT)),y)
ifeq ($(strip $(BUILD_NAND_IMG_BLKSIZE_16KB)),y)
	$(HOSTTOOLS_DIR)/scripts/bcmImageMaker --cferom $(CFE_ROM_FILE) --blocksize $(FLASH_NAND_BLOCK_16KB) --bootofs $(FLASH_BOOT_OFS) --bootsize $(FLASH_NAND_BLOCK_16KB) --rootfs jffs2_rootfs16kb_secureboot.img --image $(FLASH_NAND_CFEROM_FS_IMAGE_NAME_16)_jffs2_secureboot --mirroredcfe
	$(HOSTTOOLS_DIR)/scripts/bcmImageMaker --cferom $(CFE_ROM_FILE) --blocksize $(FLASH_NAND_BLOCK_16KB) --bootofs $(FLASH_BOOT_OFS) --bootsize $(FLASH_NAND_BLOCK_16KB) --ubifs --bootfs bootfs16kb_secureboot.img --rootfs ubi_rootfs16kb.img --image $(FLASH_NAND_CFEROM_FS_IMAGE_NAME_16)_ubi_secureboot --mirroredcfe
endif
ifeq ($(strip $(BUILD_NAND_IMG_BLKSIZE_128KB)),y)
	$(HOSTTOOLS_DIR)/scripts/bcmImageMaker --cferom $(CFE_ROM_FILE) --blocksize $(FLASH_NAND_BLOCK_128KB) --bootofs $(FLASH_BOOT_OFS) --bootsize $(FLASH_NAND_BLOCK_128KB) --rootfs jffs2_rootfs128kb_secureboot.img --image $(FLASH_NAND_CFEROM_FS_IMAGE_NAME_128)_jffs2_secureboot --mirroredcfe
	$(HOSTTOOLS_DIR)/scripts/bcmImageMaker --cferom $(CFE_ROM_FILE) --blocksize $(FLASH_NAND_BLOCK_128KB) --bootofs $(FLASH_BOOT_OFS) --bootsize $(FLASH_NAND_BLOCK_128KB) --ubifs --bootfs bootfs128kb_secureboot.img --rootfs ubi_rootfs128kb.img --image $(FLASH_NAND_CFEROM_FS_IMAGE_NAME_128)_ubi_secureboot --mirroredcfe
endif
ifeq ($(strip $(BUILD_NAND_IMG_BLKSIZE_256KB)),y)
	$(HOSTTOOLS_DIR)/scripts/bcmImageMaker --cferom $(CFE_ROM_FILE) --blocksize $(FLASH_NAND_BLOCK_256KB) --bootofs $(FLASH_BOOT_OFS) --bootsize $(FLASH_NAND_BLOCK_256KB) --rootfs jffs2_rootfs256kb_secureboot.img --image $(FLASH_NAND_CFEROM_FS_IMAGE_NAME_256)_jffs2_secureboot --mirroredcfe
	$(HOSTTOOLS_DIR)/scripts/bcmImageMaker --cferom $(CFE_ROM_FILE) --blocksize $(FLASH_NAND_BLOCK_256KB) --bootofs $(FLASH_BOOT_OFS) --bootsize $(FLASH_NAND_BLOCK_256KB) --ubifs --bootfs bootfs256kb_secureboot.img --rootfs ubi_rootfs256kb.img --image $(FLASH_NAND_CFEROM_FS_IMAGE_NAME_256)_ubi_secureboot --mirroredcfe
endif
ifeq ($(strip $(BUILD_NAND_IMG_BLKSIZE_512KB)),y)
	$(HOSTTOOLS_DIR)/scripts/bcmImageMaker --cferom $(CFE_ROM_FILE) --blocksize $(FLASH_NAND_BLOCK_512KB) --bootofs $(FLASH_BOOT_OFS) --bootsize $(FLASH_NAND_BLOCK_512KB) --rootfs jffs2_rootfs512kb_secureboot.img --image $(FLASH_NAND_CFEROM_FS_IMAGE_NAME_512)_jffs2_secureboot --mirroredcfe
	$(HOSTTOOLS_DIR)/scripts/bcmImageMaker --cferom $(CFE_ROM_FILE) --blocksize $(FLASH_NAND_BLOCK_512KB) --bootofs $(FLASH_BOOT_OFS) --bootsize $(FLASH_NAND_BLOCK_512KB) --ubifs --bootfs bootfs256kb_secureboot.img --rootfs ubi_rootfs512kb.img --image $(FLASH_NAND_CFEROM_FS_IMAGE_NAME_512)_ubi_secureboot --mirroredcfe
endif
ifeq ($(strip $(BUILD_NAND_IMG_BLKSIZE_1024KB)),y)
	$(HOSTTOOLS_DIR)/scripts/bcmImageMaker --cferom $(CFE_ROM_FILE) --blocksize $(FLASH_NAND_BLOCK_1024KB) --bootofs $(FLASH_BOOT_OFS) --bootsize $(FLASH_NAND_BLOCK_1024KB) --rootfs jffs2_rootfs1024kb_secureboot.img --image $(FLASH_NAND_CFEROM_FS_IMAGE_NAME_1024)_jffs2_secureboot --mirroredcfe
	$(HOSTTOOLS_DIR)/scripts/bcmImageMaker --cferom $(CFE_ROM_FILE) --blocksize $(FLASH_NAND_BLOCK_1024KB) --bootofs $(FLASH_BOOT_OFS) --bootsize $(FLASH_NAND_BLOCK_1024KB) --ubifs --bootfs bootfs1024kb_secureboot.img --rootfs ubi_rootfs1024kb.img --image $(FLASH_NAND_CFEROM_FS_IMAGE_NAME_1024)_ubi_secureboot --mirroredcfe
endif
endif

    ifeq ($(strip $(SKIP_TIMESTAMP_IMAGE)),)
# copy images to images directory and add a timestamp
	find $(PROFILE_DIR) -name *_nand_cferom_*.w  -printf "%f\n" | while read name; do cp $(PROFILE_DIR)/$$name $(IMAGES_DIR)/$${name/.w/_$(BRCM_RELEASETAG)-$(shell date '+%y%m%d_%H%M').w}; done
    endif

endif
endif


#__MSTC. modify
#ifneq ($(findstring _$(strip $(BRCM_KERNEL_ROOTFS))_,_all_ _squashfs_),)
ifeq ($(strip $(BRCM_KERNEL_ROOTFS)),squashfs)
# NOR SQUASH
	cd $(PROFILE_DIR); \
	cp $(KERNEL_DIR)/vmlinux . ; \
	$(STRIP) --remove-section=.note --remove-section=.comment vmlinux; \
	$(OBJCOPY) -O binary vmlinux vmlinux.bin; \
	$(HOSTTOOLS_DIR)/cmplzma -k -2 vmlinux vmlinux.bin vmlinux.lz;\
	$(HOSTTOOLS_DIR)/bcmImageBuilder $(BRCM_ENDIAN_FLAGS) --output $(FS_KERNEL_IMAGE_NAME) --chip $(or $(TAG_OVERRIDE),$(BRCM_CHIP)) --board $(BRCM_BOARD_ID) --blocksize $(BRCM_FLASHBLK_SIZE) --image-version $(IMAGE_VERSION) --cfefile $(CFE_FILE) --rootfsfile rootfs.img --kernelfile vmlinux.lz; \
	$(HOSTTOOLS_DIR)/bcmImageBuilder $(BRCM_ENDIAN_FLAGS) --output $(CFE_FS_KERNEL_IMAGE_NAME) --chip $(or $(TAG_OVERRIDE),$(BRCM_CHIP)) --board $(BRCM_BOARD_ID) --blocksize $(BRCM_FLASHBLK_SIZE) --image-version $(IMAGE_VERSION) --cfefile $(CFE_FILE) --rootfsfile rootfs.img --kernelfile vmlinux.lz --include-cfe; \
	$(HOSTTOOLS_DIR)/createimg --endian $(ARCH_ENDIAN) --boardid=$(BRCM_BOARD_ID) --voiceboardid $(BRCM_VOICE_BOARD_ID) --numbermac=$(BRCM_NUM_MAC_ADDRESSES) --macaddr=$(BRCM_BASE_MAC_ADDRESS) --tp=$(BRCM_MAIN_TP_NUM) --psisize=$(BRCM_PSI_SIZE) --logsize=$(BRCM_LOG_SECTION_SIZE) --auxfsprcnt=$(BRCM_AUXFS_PERCENT) --gponsn=$(BRCM_GPON_SERIAL_NUMBER) --gponpw=$(BRCM_GPON_PASSWORD) --inputfile=$(CFE_FS_KERNEL_IMAGE_NAME) --outputfile=$(FLASH_IMAGE_NAME); \
	$(HOSTTOOLS_DIR)/addvtoken --endian $(ARCH_ENDIAN) --chip $(or $(TAG_OVERRIDE),$(BRCM_CHIP)) --flashtype NOR $(FLASH_IMAGE_NAME) $(FLASH_IMAGE_NAME).w
	@mkdir -p $(IMAGES_DIR)
	ifeq ($(strip $(SKIP_TIMESTAMP_IMAGE)),)
# copy images to images directory and add a timestamp
	    @cp $(PROFILE_DIR)/$(FLASH_IMAGE_NAME).w $(IMAGES_DIR)/$(FLASH_IMAGE_NAME)_$(BRCM_RELEASETAG)-$(shell date '+%y%m%d_%H%M').w
ifneq ($(strip $(BUILD_MSTC_MODIFY)),)
		@cp $(PROFILE_DIR)/$(FS_KERNEL_IMAGE_NAME) $(IMAGES_DIR)/$(FS_KERNEL_IMAGE_NAME)_$(BRCM_RELEASETAG)-$(shell date '+%y%m%d_%H%M')
endif
		endif
	    @cp $(PROFILE_DIR)/$(CFE_FS_KERNEL_IMAGE_NAME) $(IMAGES_DIR)/$(CFE_FS_KERNEL_IMAGE_NAME)_$(BRCM_RELEASETAG)-$(shell date '+%y%m%d_%H%M')
	    ifneq ($(strip $(BUILD_MSTC_MODIFY)),)
	    @cp $(PROFILE_DIR)/$(FS_KERNEL_IMAGE_NAME) $(IMAGES_DIR)/ras.bin
	    endif


	@echo
	    @echo -e "Done! Image $(PROFILE) has been built in $(PROFILE_DIR)."
endif

nandcfeimage: hosttools_nandcfe
	rm -rf  $(TARGET_FS)/
	mkdir -p $(TARGET_FS)
	cp $(PROFILE_DIR)/../cfe/cfe$(BRCM_CHIP_WVER)ram.bin $(TARGET_FS)/cferam.000
	echo -e "/cferam.000" > $(HOSTTOOLS_DIR)/nocomprlist
ifeq ($(strip $(BUILD_NAND_IMG_BLKSIZE_16KB)),y)
	$(HOSTTOOLS_DIR)/mkfs.jffs2 -v $(BRCM_ENDIAN_FLAGS) -p -n -e $(FLASH_NAND_BLOCK_16KB) -r $(TARGET_FS) -o $(PROFILE_DIR)/rootfs16kb.img -N $(HOSTTOOLS_DIR)/nocomprlist
endif
ifeq ($(strip $(BUILD_NAND_IMG_BLKSIZE_128KB)),y)
	$(HOSTTOOLS_DIR)/mkfs.jffs2 -v $(BRCM_ENDIAN_FLAGS) -p -n -e $(FLASH_NAND_BLOCK_128KB) -r $(TARGET_FS) -o $(PROFILE_DIR)/rootfs128kb.img -N $(HOSTTOOLS_DIR)/nocomprlist
endif
ifeq ($(strip $(BUILD_NAND_IMG_BLKSIZE_256KB)),y)
	$(HOSTTOOLS_DIR)/mkfs.jffs2 -v $(BRCM_ENDIAN_FLAGS) -p -n -e $(FLASH_NAND_BLOCK_256KB) -r $(TARGET_FS) -o $(PROFILE_DIR)/rootfs256kb.img -N $(HOSTTOOLS_DIR)/nocomprlist
endif
ifeq ($(strip $(BUILD_NAND_IMG_BLKSIZE_512KB)),y)
	$(HOSTTOOLS_DIR)/mkfs.jffs2 -v $(BRCM_ENDIAN_FLAGS) -p -n -e $(FLASH_NAND_BLOCK_512KB) -r $(TARGET_FS) -o $(PROFILE_DIR)/rootfs512kb.img -N $(HOSTTOOLS_DIR)/nocomprlist
endif
ifeq ($(strip $(BUILD_NAND_IMG_BLKSIZE_1024KB)),y)
	$(HOSTTOOLS_DIR)/mkfs.jffs2 -v $(BRCM_ENDIAN_FLAGS) -p -n -e $(FLASH_NAND_BLOCK_1024KB) -r $(TARGET_FS) -o $(PROFILE_DIR)/rootfs1024kb.img -N $(HOSTTOOLS_DIR)/nocomprlist
endif

ifeq ($(strip $(BUILD_SECURE_BOOT)),y)
	$(HOSTTOOLS_DIR)/SecureBootUtils/makeEncryptedCfeRam $(BRCM_CHIP) $(PROFILE_DIR)
	mv $(PROFILE_DIR)/../cfe/cfesec$(BRCM_CHIP)ram.bin $(TARGET_FS)/secram.000
	echo -e "/secram.000" >> $(HOSTTOOLS_DIR)/nocomprlist
ifeq ($(strip $(BUILD_NAND_IMG_BLKSIZE_16KB)),y)
	$(HOSTTOOLS_DIR)/mkfs.jffs2 -v $(BRCM_ENDIAN_FLAGS) -p -n -e $(FLASH_NAND_BLOCK_16KB) -r $(TARGET_FS) -o $(PROFILE_DIR)/rootfs16kb_secureboot.img -N $(HOSTTOOLS_DIR)/nocomprlist
endif
ifeq ($(strip $(BUILD_NAND_IMG_BLKSIZE_128KB)),y)
	$(HOSTTOOLS_DIR)/mkfs.jffs2 -v $(BRCM_ENDIAN_FLAGS) -p -n -e $(FLASH_NAND_BLOCK_128KB) -r $(TARGET_FS) -o $(PROFILE_DIR)/rootfs128kb_secureboot.img -N $(HOSTTOOLS_DIR)/nocomprlist
endif
ifeq ($(strip $(BUILD_NAND_IMG_BLKSIZE_256KB)),y)
	$(HOSTTOOLS_DIR)/mkfs.jffs2 -v $(BRCM_ENDIAN_FLAGS) -p -n -e $(FLASH_NAND_BLOCK_256KB) -r $(TARGET_FS) -o $(PROFILE_DIR)/rootfs256kb_secureboot.img -N $(HOSTTOOLS_DIR)/nocomprlist
endif
ifeq ($(strip $(BUILD_NAND_IMG_BLKSIZE_512KB)),y)
	$(HOSTTOOLS_DIR)/mkfs.jffs2 -v $(BRCM_ENDIAN_FLAGS) -p -n -e $(FLASH_NAND_BLOCK_512KB) -r $(TARGET_FS) -o $(PROFILE_DIR)/rootfs512kb_secureboot.img -N $(HOSTTOOLS_DIR)/nocomprlist
endif
ifeq ($(strip $(BUILD_NAND_IMG_BLKSIZE_1024KB)),y)
	$(HOSTTOOLS_DIR)/mkfs.jffs2 -v $(BRCM_ENDIAN_FLAGS) -p -n -e $(FLASH_NAND_BLOCK_1024KB) -r $(TARGET_FS) -o $(PROFILE_DIR)/rootfs1024kb_secureboot.img -N $(HOSTTOOLS_DIR)/nocomprlist
endif
endif

ifeq ($(strip $(BUILD_MSTC_MODIFY)),y)
	re-combine RootFS, Kernel and ImageDefault firmware
ifeq ($(strip $(BRCM_CHIP)),68500)
	$(HOSTTOOLS_DIR)/scripts/bcmImageMaker --cferom $(TARGETS_DIR)/cfe/cfe$(BRCM_CHIP)rom_DDR2.bin --blocksize $(FLASH_NAND_BLOCK_128KB) --bootofs 0 --bootsize $(FLASH_NAND_BLOCK_128KB) --rootfs rootfs128kb.img --image $(FLASH_BASE_IMAGE_NAME)_nand_ddr2_cfeonly.128  
endif
else
	rm $(HOSTTOOLS_DIR)/nocomprlist

ifeq ($(strip $(BUILD_NAND_IMG_BLKSIZE_16KB)),y)
	$(HOSTTOOLS_DIR)/scripts/bcmImageMaker --cferom $(CFE_ROM_FILE) --blocksize $(FLASH_NAND_BLOCK_16KB) --bootofs $(FLASH_BOOT_OFS) --bootsize $(FLASH_NAND_BLOCK_16KB) --rootfs rootfs16kb.img --image $(FLASH_BASE_IMAGE_NAME)_nand_cfeonly.16
endif
ifeq ($(strip $(BUILD_NAND_IMG_BLKSIZE_128KB)),y)
	$(HOSTTOOLS_DIR)/scripts/bcmImageMaker --cferom $(CFE_ROM_FILE) --blocksize $(FLASH_NAND_BLOCK_128KB) --bootofs $(FLASH_BOOT_OFS) --bootsize $(FLASH_NAND_BLOCK_128KB)  --rootfs rootfs128kb.img --image $(FLASH_BASE_IMAGE_NAME)_nand_cfeonly.128
endif
ifeq ($(strip $(BUILD_NAND_IMG_BLKSIZE_256KB)),y)
	$(HOSTTOOLS_DIR)/scripts/bcmImageMaker --cferom $(CFE_ROM_FILE) --blocksize $(FLASH_NAND_BLOCK_256KB) --bootofs $(FLASH_BOOT_OFS) --bootsize $(FLASH_NAND_BLOCK_256KB) --rootfs rootfs256kb.img --image $(FLASH_BASE_IMAGE_NAME)_nand_cfeonly.256
endif
ifeq ($(strip $(BUILD_NAND_IMG_BLKSIZE_512KB)),y)
	$(HOSTTOOLS_DIR)/scripts/bcmImageMaker --cferom $(CFE_ROM_FILE) --blocksize $(FLASH_NAND_BLOCK_512KB) --bootofs $(FLASH_BOOT_OFS) --bootsize $(FLASH_NAND_BLOCK_512KB)  --rootfs rootfs512kb.img --image $(FLASH_BASE_IMAGE_NAME)_nand_cfeonly.512
endif
ifeq ($(strip $(BUILD_NAND_IMG_BLKSIZE_1024KB)),y)
	$(HOSTTOOLS_DIR)/scripts/bcmImageMaker --cferom $(CFE_ROM_FILE) --blocksize $(FLASH_NAND_BLOCK_1024KB) --bootofs $(FLASH_BOOT_OFS) --bootsize $(FLASH_NAND_BLOCK_1024KB)  --rootfs rootfs1024kb.img --image $(FLASH_BASE_IMAGE_NAME)_nand_cfeonly.1024
endif

ifeq ($(strip $(BUILD_SECURE_BOOT)),y)
ifeq ($(strip $(BUILD_NAND_IMG_BLKSIZE_16KB)),y)
	$(HOSTTOOLS_DIR)/scripts/bcmImageMaker --cferom $(CFE_ROM_FILE) --blocksize $(FLASH_NAND_BLOCK_16KB) --bootofs $(FLASH_BOOT_OFS) --bootsize $(FLASH_NAND_BLOCK_16KB) --rootfs rootfs16kb_secureboot.img --image $(FLASH_BASE_IMAGE_NAME)_nand_cfeonly_secureboot.16 --mirroredcfe
endif
ifeq ($(strip $(BUILD_NAND_IMG_BLKSIZE_128KB)),y)
	$(HOSTTOOLS_DIR)/scripts/bcmImageMaker --cferom $(CFE_ROM_FILE) --blocksize $(FLASH_NAND_BLOCK_128KB) --bootofs $(FLASH_BOOT_OFS) --bootsize $(FLASH_NAND_BLOCK_128KB) --rootfs rootfs128kb_secureboot.img --image $(FLASH_BASE_IMAGE_NAME)_nand_cfeonly_secureboot.128 --mirroredcfe
endif
ifeq ($(strip $(BUILD_NAND_IMG_BLKSIZE_256KB)),y)
	$(HOSTTOOLS_DIR)/scripts/bcmImageMaker --cferom $(CFE_ROM_FILE) --blocksize $(FLASH_NAND_BLOCK_256KB) --bootofs $(FLASH_BOOT_OFS) --bootsize $(FLASH_NAND_BLOCK_256KB) --rootfs rootfs256kb_secureboot.img --image $(FLASH_BASE_IMAGE_NAME)_nand_cfeonly_secureboot.256 --mirroredcfe
endif
ifeq ($(strip $(BUILD_NAND_IMG_BLKSIZE_512KB)),y)
	$(HOSTTOOLS_DIR)/scripts/bcmImageMaker --cferom $(CFE_ROM_FILE) --blocksize $(FLASH_NAND_BLOCK_512KB) --bootofs $(FLASH_BOOT_OFS) --bootsize $(FLASH_NAND_BLOCK_512KB) --rootfs rootfs512kb_secureboot.img --image $(FLASH_BASE_IMAGE_NAME)_nand_cfeonly_secureboot.512 --mirroredcfe
endif
ifeq ($(strip $(BUILD_NAND_IMG_BLKSIZE_1024KB)),y)
	$(HOSTTOOLS_DIR)/scripts/bcmImageMaker --cferom $(CFE_ROM_FILE) --blocksize $(FLASH_NAND_BLOCK_1024KB) --bootofs $(FLASH_BOOT_OFS) --bootsize $(FLASH_NAND_BLOCK_1024KB) --rootfs rootfs1024kb_secureboot.img --image $(FLASH_BASE_IMAGE_NAME)_nand_cfeonly_secureboot.1024 --mirroredcfe
endif
endif
endif
	rm -f  $(TARGET_FS)/cferam.000
	rm -f  $(TARGET_FS)/secram.000


###########################################
# Re-combine RootFS, Kernel, ImageDefault,
# ROM-D and HPNA firmware
###########################################
ifneq ($(strip $(BUILD_MSTC_MODIFY)),)
rebindimg merge:
	cd $(PROFILE_DIR); \
	if [ "$(MSTC_OBM_IMAGE_DEFAULT_FILE)" != """" ]; then \
		$(HOSTTOOLS_DIR)/CompressConfig $(DEFAULTCFG_DIR)/$(MSTC_OBM_IMAGE_DEFAULT_FILE) $(PROFILE_DIR)/$(MSTC_OBM_IMAGE_DEFAULT_FILE); \
	fi; \
	if [ "$(BUILD_HPNA)" = "y" ] && [ "$(MSTC_HPNA_SWVERSION)" != """" ]; then \
		if [ "$(MSTC_OBM_IMAGE_DEFAULT)" = "y" ]; then \
			if [ "$(MSTC_ROM_D)" = "y" ]; then \
			$(HOSTTOOLS_DIR)/bcmImageBuilder --output $(FS_KERNEL_IMAGE_NAME) --chip $(BRCM_CHIP) --board $(BRCM_BOARD_ID) --blocksize $(BRCM_FLASHBLK_SIZE) --internalversion=$(MSTC_INTERNAL_VERSION) --externalversion=$(MSTC_EXTERNAL_VERSION) --modelid=$(MSTC_MODEL_ID) --cmodelid=$(MSTC_CUSTOM_MODEL_ID) --hpnaswversion=$(MSTC_HPNA_SWVERSION) --hpnafile $(TARGETS_DIR)/HPNA/flash.bin --cfefile $(CFE_FILE) --rootfsfile rootfs.img --kernelfile vmlinux.lz --imgdefaultfile=$(MSTC_OBM_IMAGE_DEFAULT_FILE) --romdsig $(MSTC_ROM_D_SIG) --romdfile=$(MSTC_ROM_D_FILE); \
			$(HOSTTOOLS_DIR)/bcmImageBuilder --output $(CFE_FS_KERNEL_IMAGE_NAME) --chip $(BRCM_CHIP) --board $(BRCM_BOARD_ID) --blocksize $(BRCM_FLASHBLK_SIZE) --internalversion=$(MSTC_INTERNAL_VERSION) --externalversion=$(MSTC_EXTERNAL_VERSION) --modelid=$(MSTC_MODEL_ID) --cmodelid=$(MSTC_CUSTOM_MODEL_ID) --hpnaswversion=$(MSTC_HPNA_SWVERSION) --hpnafile $(TARGETS_DIR)/HPNA/flash.bin --cfefile $(CFE_FILE) --rootfsfile rootfs.img --kernelfile vmlinux.lz --include-cfe --imgdefaultfile=$(MSTC_OBM_IMAGE_DEFAULT_FILE) --romdsig $(MSTC_ROM_D_SIG) --romdfile=$(MSTC_ROM_D_FILE); \
			else \
			$(HOSTTOOLS_DIR)/bcmImageBuilder --output $(FS_KERNEL_IMAGE_NAME) --chip $(BRCM_CHIP) --board $(BRCM_BOARD_ID) --blocksize $(BRCM_FLASHBLK_SIZE) --internalversion=$(MSTC_INTERNAL_VERSION) --externalversion=$(MSTC_EXTERNAL_VERSION) --modelid=$(MSTC_MODEL_ID) --cmodelid=$(MSTC_CUSTOM_MODEL_ID) --hpnaswversion=$(MSTC_HPNA_SWVERSION) --hpnafile $(TARGETS_DIR)/HPNA/flash.bin --cfefile $(CFE_FILE) --rootfsfile rootfs.img --kernelfile vmlinux.lz --imgdefaultfile=$(MSTC_OBM_IMAGE_DEFAULT_FILE); \
			$(HOSTTOOLS_DIR)/bcmImageBuilder --output $(CFE_FS_KERNEL_IMAGE_NAME) --chip $(BRCM_CHIP) --board $(BRCM_BOARD_ID) --blocksize $(BRCM_FLASHBLK_SIZE) --internalversion=$(MSTC_INTERNAL_VERSION) --externalversion=$(MSTC_EXTERNAL_VERSION) --modelid=$(MSTC_MODEL_ID) --cmodelid=$(MSTC_CUSTOM_MODEL_ID) --hpnaswversion=$(MSTC_HPNA_SWVERSION) --hpnafile $(TARGETS_DIR)/HPNA/flash.bin --cfefile $(CFE_FILE) --rootfsfile rootfs.img --kernelfile vmlinux.lz --include-cfe --imgdefaultfile=$(MSTC_OBM_IMAGE_DEFAULT_FILE); \
			fi;\
		else \
			if [ "$(MSTC_ROM_D)" = "y" ]; then \
      $(HOSTTOOLS_DIR)/bcmZyNandImageBuilder --output $(FS_KERNEL_IMAGE_NAME)_NAND128 --chip $(BRCM_CHIP) --board $(BRCM_BOARD_ID) --internalversion=$(MSTC_INTERNAL_VERSION) --externalversion=$(MSTC_EXTERNAL_VERSION) --modelid=$(MSTC_MODEL_ID) --cmodelid=$(MSTC_CUSTOM_MODEL_ID) --cfefile $(CFE_NAND128_FILE) --romdsig $(MSTC_ROM_D_SIG) --romdfile=$(MSTC_ROM_D_FILE) --rootfsfile rootfs128kb.img --imgdefaultfile=$(MSTC_OBM_IMAGE_DEFAULT_FILE); \
      $(HOSTTOOLS_DIR)/bcmZyNandImageBuilder --output $(CFE_FS_KERNEL_IMAGE_NAME)_NAND128 --chip $(BRCM_CHIP) --board $(BRCM_BOARD_ID) --internalversion=$(MSTC_INTERNAL_VERSION) --externalversion=$(MSTC_EXTERNAL_VERSION) --modelid=$(MSTC_MODEL_ID) --cmodelid=$(MSTC_CUSTOM_MODEL_ID) --cfefile $(CFE_NAND128_FILE) --romdsig $(MSTC_ROM_D_SIG) --romdfile=$(MSTC_ROM_D_FILE) --rootfsfile rootfs128kb.img --include-cfe --imgdefaultfile=$(MSTC_OBM_IMAGE_DEFAULT_FILE); \
      $(HOSTTOOLS_DIR)/createZyNandimg --boardid=$(BRCM_BOARD_ID) --numbermac=$(BRCM_NUM_MAC_ADDRESSES) --macaddr=$(BRCM_BASE_MAC_ADDRESS) --countrycode=$(MSTC_COUNTRY_CODE) --tp=$(BRCM_MAIN_TP_NUM) --psisize=$(BRCM_PSI_SIZE) --gponsn=$(BRCM_GPON_SERIAL_NUMBER) --gponpw=$(BRCM_GPON_PASSWORD) --backuppsi="$(BUILD_BACKUP_PSI)" --inputfile=$(CFE_FS_KERNEL_IMAGE_NAME)_NAND128 --outputfile=$(FLASH_IMAGE_NAME)_NAND128; \
      $(HOSTTOOLS_DIR)/bcmZyNandImageBuilder --output $(CFE_FS_KERNEL_IMAGE_NAME)_NAND128_TE --chip $(BRCM_CHIP) --board $(BRCM_BOARD_ID) --internalversion=$(MSTC_INTERNAL_VERSION) --externalversion=$(MSTC_EXTERNAL_VERSION) --modelid=$(MSTC_MODEL_ID) --cmodelid=$(MSTC_CUSTOM_MODEL_ID) --cfefile $(CFE_NAND128_FILE_TE) --romdsig $(MSTC_ROM_D_SIG) --romdfile=$(MSTC_ROM_D_FILE) --rootfsfile rootfs128kb.img --include-cfe --imgdefaultfile=$(MSTC_OBM_IMAGE_DEFAULT_FILE); \
      $(HOSTTOOLS_DIR)/createZyNandimg --boardid=$(BRCM_BOARD_ID) --numbermac=$(BRCM_NUM_MAC_ADDRESSES) --macaddr=$(BRCM_BASE_MAC_ADDRESS) --countrycode=$(MSTC_COUNTRY_CODE) --tp=$(BRCM_MAIN_TP_NUM) --psisize=$(BRCM_PSI_SIZE) --gponsn=$(BRCM_GPON_SERIAL_NUMBER) --gponpw=$(BRCM_GPON_PASSWORD) --backuppsi="$(BUILD_BACKUP_PSI)" --inputfile=$(CFE_FS_KERNEL_IMAGE_NAME)_NAND128_TE --outputfile=$(FLASH_IMAGE_NAME)_NAND128_TE; \
			else \
			$(HOSTTOOLS_DIR)/bcmImageBuilder --output $(FS_KERNEL_IMAGE_NAME) --chip $(BRCM_CHIP) --board $(BRCM_BOARD_ID) --blocksize $(BRCM_FLASHBLK_SIZE) --internalversion=$(MSTC_INTERNAL_VERSION) --externalversion=$(MSTC_EXTERNAL_VERSION) --modelid=$(MSTC_MODEL_ID) --cmodelid=$(MSTC_CUSTOM_MODEL_ID) --hpnaswversion=$(MSTC_HPNA_SWVERSION) --hpnafile $(TARGETS_DIR)/HPNA/flash.bin --cfefile $(CFE_FILE) --rootfsfile rootfs.img --kernelfile vmlinux.lz; \
			$(HOSTTOOLS_DIR)/bcmImageBuilder --output $(CFE_FS_KERNEL_IMAGE_NAME) --chip $(BRCM_CHIP) --board $(BRCM_BOARD_ID) --blocksize $(BRCM_FLASHBLK_SIZE) --internalversion=$(MSTC_INTERNAL_VERSION) --externalversion=$(MSTC_EXTERNAL_VERSION) --modelid=$(MSTC_MODEL_ID) --cmodelid=$(MSTC_CUSTOM_MODEL_ID) --hpnaswversion=$(MSTC_HPNA_SWVERSION) --hpnafile $(TARGETS_DIR)/HPNA/flash.bin --cfefile $(CFE_FILE) --rootfsfile rootfs.img --kernelfile vmlinux.lz --include-cfe; \
			fi; \
		fi; \
	else \
		if [ "$(MSTC_OBM_IMAGE_DEFAULT)" = "y" ]; then \
			if [ "$(MSTC_ROM_D)" = "y" ]; then \
      $(HOSTTOOLS_DIR)/bcmZyNandImageBuilder --output $(FS_KERNEL_IMAGE_NAME)_NAND128 --chip $(BRCM_CHIP) --board $(BRCM_BOARD_ID) --internalversion=$(MSTC_INTERNAL_VERSION) --externalversion=$(MSTC_EXTERNAL_VERSION) --modelid=$(MSTC_MODEL_ID) --cmodelid=$(MSTC_CUSTOM_MODEL_ID) --cfefile $(CFE_NAND128_FILE) --romdsig $(MSTC_ROM_D_SIG) --romdfile=$(MSTC_ROM_D_FILE) --rootfsfile rootfs128kb.img --imgdefaultfile=$(MSTC_OBM_IMAGE_DEFAULT_FILE); \
      $(HOSTTOOLS_DIR)/bcmZyNandImageBuilder --output $(CFE_FS_KERNEL_IMAGE_NAME)_NAND128 --chip $(BRCM_CHIP) --board $(BRCM_BOARD_ID) --internalversion=$(MSTC_INTERNAL_VERSION) --externalversion=$(MSTC_EXTERNAL_VERSION) --modelid=$(MSTC_MODEL_ID) --cmodelid=$(MSTC_CUSTOM_MODEL_ID) --cfefile $(CFE_NAND128_FILE) --romdsig $(MSTC_ROM_D_SIG) --romdfile=$(MSTC_ROM_D_FILE) --rootfsfile rootfs128kb.img --include-cfe --imgdefaultfile=$(MSTC_OBM_IMAGE_DEFAULT_FILE); \
      $(HOSTTOOLS_DIR)/createZyNandimg --boardid=$(BRCM_BOARD_ID) --numbermac=$(BRCM_NUM_MAC_ADDRESSES) --macaddr=$(BRCM_BASE_MAC_ADDRESS) --countrycode=$(MSTC_COUNTRY_CODE) --tp=$(BRCM_MAIN_TP_NUM) --psisize=$(BRCM_PSI_SIZE) --gponsn=$(BRCM_GPON_SERIAL_NUMBER) --gponpw=$(BRCM_GPON_PASSWORD) --backuppsi="$(BUILD_BACKUP_PSI)" --inputfile=$(CFE_FS_KERNEL_IMAGE_NAME)_NAND128 --outputfile=$(FLASH_IMAGE_NAME)_NAND128; \
      $(HOSTTOOLS_DIR)/bcmZyNandImageBuilder --output $(CFE_FS_KERNEL_IMAGE_NAME)_NAND128_TE --chip $(BRCM_CHIP) --board $(BRCM_BOARD_ID) --internalversion=$(MSTC_INTERNAL_VERSION) --externalversion=$(MSTC_EXTERNAL_VERSION) --modelid=$(MSTC_MODEL_ID) --cmodelid=$(MSTC_CUSTOM_MODEL_ID) --cfefile $(CFE_NAND128_FILE_TE) --romdsig $(MSTC_ROM_D_SIG) --romdfile=$(MSTC_ROM_D_FILE) --rootfsfile rootfs128kb.img --include-cfe --imgdefaultfile=$(MSTC_OBM_IMAGE_DEFAULT_FILE); \
      $(HOSTTOOLS_DIR)/createZyNandimg --boardid=$(BRCM_BOARD_ID) --numbermac=$(BRCM_NUM_MAC_ADDRESSES) --macaddr=$(BRCM_BASE_MAC_ADDRESS) --countrycode=$(MSTC_COUNTRY_CODE) --tp=$(BRCM_MAIN_TP_NUM) --psisize=$(BRCM_PSI_SIZE) --gponsn=$(BRCM_GPON_SERIAL_NUMBER) --gponpw=$(BRCM_GPON_PASSWORD) --backuppsi="$(BUILD_BACKUP_PSI)" --inputfile=$(CFE_FS_KERNEL_IMAGE_NAME)_NAND128_TE --outputfile=$(FLASH_IMAGE_NAME)_NAND128_TE; \
			else \
			$(HOSTTOOLS_DIR)/bcmImageBuilder --output $(FS_KERNEL_IMAGE_NAME) --chip $(BRCM_CHIP) --board $(BRCM_BOARD_ID) --blocksize $(BRCM_FLASHBLK_SIZE) --internalversion=$(MSTC_INTERNAL_VERSION) --externalversion=$(MSTC_EXTERNAL_VERSION) --modelid=$(MSTC_MODEL_ID) --cmodelid=$(MSTC_CUSTOM_MODEL_ID) --cfefile $(CFE_FILE) --rootfsfile rootfs.img --kernelfile vmlinux.lz --imgdefaultfile=$(MSTC_OBM_IMAGE_DEFAULT_FILE); \
			$(HOSTTOOLS_DIR)/bcmImageBuilder --output $(CFE_FS_KERNEL_IMAGE_NAME) --chip $(BRCM_CHIP) --board $(BRCM_BOARD_ID) --blocksize $(BRCM_FLASHBLK_SIZE) --internalversion=$(MSTC_INTERNAL_VERSION) --externalversion=$(MSTC_EXTERNAL_VERSION) --modelid=$(MSTC_MODEL_ID) --cmodelid=$(MSTC_CUSTOM_MODEL_ID) --cfefile $(CFE_FILE) --rootfsfile rootfs.img --kernelfile vmlinux.lz --include-cfe --imgdefaultfile=$(MSTC_OBM_IMAGE_DEFAULT_FILE); \
			fi; \
		else \
			if [ "$(MSTC_ROM_D)" = "y" ]; then \
			$(HOSTTOOLS_DIR)/bcmImageBuilder --output $(FS_KERNEL_IMAGE_NAME) --chip $(BRCM_CHIP) --board $(BRCM_BOARD_ID) --blocksize $(BRCM_FLASHBLK_SIZE) --internalversion=$(MSTC_INTERNAL_VERSION) --externalversion=$(MSTC_EXTERNAL_VERSION) --modelid=$(MSTC_MODEL_ID) --cmodelid=$(MSTC_CUSTOM_MODEL_ID) --cfefile $(CFE_FILE) --rootfsfile rootfs.img --kernelfile vmlinux.lz --romdsig $(MSTC_ROM_D_SIG) --romdfile=$(MSTC_ROM_D_FILE); \
			$(HOSTTOOLS_DIR)/bcmImageBuilder --output $(CFE_FS_KERNEL_IMAGE_NAME) --chip $(BRCM_CHIP) --board $(BRCM_BOARD_ID) --blocksize $(BRCM_FLASHBLK_SIZE) --internalversion=$(MSTC_INTERNAL_VERSION) --externalversion=$(MSTC_EXTERNAL_VERSION) --modelid=$(MSTC_MODEL_ID) --cmodelid=$(MSTC_CUSTOM_MODEL_ID) --cfefile $(CFE_FILE) --rootfsfile rootfs.img --kernelfile vmlinux.lz --include-cfe --romdsig $(MSTC_ROM_D_SIG) --romdfile=$(MSTC_ROM_D_FILE); \
			else \
			$(HOSTTOOLS_DIR)/bcmImageBuilder --output $(FS_KERNEL_IMAGE_NAME) --chip $(BRCM_CHIP) --board $(BRCM_BOARD_ID) --blocksize $(BRCM_FLASHBLK_SIZE) --internalversion=$(MSTC_INTERNAL_VERSION) --externalversion=$(MSTC_EXTERNAL_VERSION) --modelid=$(MSTC_MODEL_ID) --cmodelid=$(MSTC_CUSTOM_MODEL_ID) --cfefile $(CFE_FILE) --rootfsfile rootfs.img --kernelfile vmlinux.lz; \
			$(HOSTTOOLS_DIR)/bcmImageBuilder --output $(CFE_FS_KERNEL_IMAGE_NAME) --chip $(BRCM_CHIP) --board $(BRCM_BOARD_ID) --blocksize $(BRCM_FLASHBLK_SIZE) --internalversion=$(MSTC_INTERNAL_VERSION) --externalversion=$(MSTC_EXTERNAL_VERSION) --modelid=$(MSTC_MODEL_ID) --cmodelid=$(MSTC_CUSTOM_MODEL_ID) --cfefile $(CFE_FILE) --rootfsfile rootfs.img --kernelfile vmlinux.lz --include-cfe; \
			fi; \
		fi; \
	fi; \
	if [ "$(MSTC_OBM_IMAGE_DEFAULT_FILE)" != """" ]; then \
		rm $(PROFILE_DIR)/$(MSTC_OBM_IMAGE_DEFAULT_FILE); \
	fi; \
	if [ "$(MSTC_NAND_BLOCK_16)" = "y" ]; then \
		$(HOSTTOOLS_DIR)/NANDimg_gen -v $(MSTC_EXTERNAL_VERSION) -q 1 -t small -M 1; \
		$(HOSTTOOLS_DIR)/NANDimg_gen -f $(FLASH_IMAGE_NAME)_NAND128_TE -v $(MSTC_EXTERNAL_VERSION) -i $(shell date '+%y%m%d_%H%M') -S 0 -s jffs2 -c on -q 1 -p $(MSTC_NAND_FLASH_SIZE) -t small -o brcom -e 512 -G 50; \
	else \
		$(HOSTTOOLS_DIR)/NANDimg_gen -v $(MSTC_EXTERNAL_VERSION) -q 1 -t large -M 1; \
		$(HOSTTOOLS_DIR)/NANDimg_gen -f $(FLASH_IMAGE_NAME)_NAND128_TE -v $(MSTC_EXTERNAL_VERSION) -i $(shell date '+%y%m%d_%H%M') -S 0 -s jffs2 -c on -q 1 -p $(MSTC_NAND_FLASH_SIZE) -t large -o brcom -e 512 -G 50; \
	fi ; \
	rm -f $(CFE_FS_KERNEL_IMAGE_NAME)_NAND128_TE; \
	rm -f $(FLASH_IMAGE_NAME)_NAND128_TE; \
	cat common_header.img partition_header.img > product_header.img; \
	cat product_header.img partition_image.img > $(SMT_IMAGE_NAME)_NAND128; \
	rm common_header.img partition_header.img product_header.img partition_image.img; \
	$(HOSTTOOLS_DIR)/addvtoken $(FLASH_IMAGE_NAME)_NAND128 $(FLASH_IMAGE_NAME)_NAND128.w
	@mkdir -p $(IMAGES_DIR)
	@cp $(PROFILE_DIR)/$(FS_KERNEL_IMAGE_NAME)_NAND128 $(IMAGES_DIR)/$(FS_KERNEL_IMAGE_NAME)_NAND128_$(BRCM_RELEASETAG)-$(shell date '+%y%m%d_%H%M')
	@cp $(PROFILE_DIR)/$(FS_KERNEL_IMAGE_NAME)_NAND128 $(IMAGES_DIR)/ras.bin
	@echo
	@echo -e "Done! Image $(PROFILE) has been re-bind in $(IMAGES_DIR)."
	
endif

###########################################
#
# System code clean-up
#
###########################################

#
# mwang: since SUBDIRS are no longer defined, the next two targets are not useful anymore.
# how were they used anyways?
#
#subdirs: $(patsubst %, _dir_%, $(SUBDIRS))

#$(patsubst %, _dir_%, $(SUBDIRS)) :
#	$(MAKE) -C $(patsubst _dir_%, %, $@) $(TGT)

clean: bcmdrivers_clean data-model_clean userspace_clean  \
       kernel_clean hosttools_clean voice_clean xchange_clean wlan_clean target_clean
	rm -f $(HOSTTOOLS_DIR)/scripts/lxdialog/*.o
	rm -f .tmpconfig*
	rm -f $(LAST_PROFILE_COOKIE)

fssrc_clean:
	rm -fr $(FSSRC_DIR)/bin
	rm -fr $(FSSRC_DIR)/sbin
	rm -fr $(FSSRC_DIR)/lib
	rm -fr $(FSSRC_DIR)/upnp
	rm -fr $(FSSRC_DIR)/docs
	rm -fr $(FSSRC_DIR)/webs
	rm -fr $(FSSRC_DIR)/usr
	rm -fr $(FSSRC_DIR)/linuxrc
	rm -fr $(FSSRC_DIR)/images
	rm -fr $(FSSRC_DIR)/etc/wlan
	rm -fr $(FSSRC_DIR)/etc/certs

kernel_clean: sanity_check
	-$(MAKE) -C $(KERNEL_DIR) mrproper
	rm -f $(KERNEL_DIR)/arch/mips/defconfig
	rm -f $(KERNEL_DIR)/arch/arm/defconfig
	rm -f $(HOSTTOOLS_DIR)/lzma/decompress/*.o
	rm -rf $(XCHANGE_DIR)/dslx/lib/LinuxKernel
	rm -rf $(XCHANGE_DIR)/dslx/obj/LinuxKernel
	rm -f $(KERNEL_INCLUDE_LINK)
	rm -f $(KERNEL_MIPS_INCLUDE_LINK)
	rm -f $(KERNEL_ARM_INCLUDE_LINK)

bcmdrivers_clean:
	$(MAKE) -C bcmdrivers clean

userspace_clean: sanity_check fssrc_clean 
	$(MAKE) -C userspace clean

data-model_clean:
	$(MAKE) -C data-model clean

unittests_clean:
	$(MAKE) -C unittests clean

target_clean: sanity_check
	rm -f $(PROFILE_DIR)/*.img
	rm -f $(PROFILE_DIR)/vmlinux*
	rm -f $(PROFILE_DIR)/*.w
	rm -f $(PROFILE_DIR)/*.srec
ifeq ($(strip $(BUILD_MSTC_MODIFY)),y)
# star __MSTC__, RaynorChung: Support 963268, patch form SVN#3597 on http://svn.zyxel.com.tw/svn/CPE_SW1/BCM96368/trunk/P-870HA/branches/cht/fttb8/4.11 
	rm -f $(PROFILE_DIR)/$(FLASH_NAND_RAW_FS_IMAGE_NAME_16).w
	rm -f $(PROFILE_DIR)/$(FLASH_NAND_FS_IMAGE_NAME_16).w
	rm -f $(PROFILE_DIR)/$(FS_KERNEL_IMAGE_NAME)_NAND128
	rm -f $(PROFILE_DIR)/$(CFE_FS_KERNEL_IMAGE_NAME)_NAND128
	rm -f $(PROFILE_DIR)/$(FLASH_IMAGE_NAME)_NAND128
	rm -f $(PROFILE_DIR)/$(FLASH_IMAGE_NAME)_NAND128.w
	rm -f $(PROFILE_DIR)/$(SMT_IMAGE_NAME)_NAND128
# end __MSTC__, RaynorChung: Support 963268, patch form SVN#3597 on http://svn.zyxel.com.tw/svn/CPE_SW1/BCM96368/trunk/P-870HA/branches/cht/fttb8/4.11 
endif
	rm -f $(PROFILE_DIR)/ramdisk
	rm -f $(PROFILE_DIR)/$(FS_KERNEL_IMAGE_NAME)
	rm -f $(PROFILE_DIR)/$(CFE_FS_KERNEL_IMAGE_NAME)
	rm -f $(PROFILE_DIR)/$(FLASH_IMAGE_NAME)
	rm -fr $(PROFILE_DIR)/modules
	rm -fr $(PROFILE_DIR)/op
	rm -fr $(INSTALL_DIR)
	rm -fr $(BCM_FSBUILD_DIR)
	find targets -name vmlinux -print -exec rm -f "{}" ";"
	rm -fr $(TARGET_FS)
ifeq ($(strip $(BRCM_KERNEL_ROOTFS)),all)
	rm -fr $(TARGET_BOOTFS)
  endif

hosttools_clean:
	$(MAKE) -C $(HOSTTOOLS_DIR) clean

xchange_clean:
	rm -rf $(XCHANGE_DIR)/dslx/lib/LinuxUser
	rm -rf $(XCHANGE_DIR)/dslx/obj/LinuxUser	

# In the data release tarball, vodsl is not present,
# so don't go in there unconditionally.

ifeq ($(strip $(BUILD_MSTC_MODIFY)),)
ifneq ($(strip $(BUILD_VODSL)),)
vodsl_clean: sanity_check
	$(MAKE) -C $(BUILD_DIR)/userspace/private/apps/vodsl clean
	find userspace/private/apps/vodsl -name '*.o'|xargs rm -f
else
vodsl_clean:
	@echo "skipping vodsl (not configured)"
endif
else
zyimsclean: sanity_check
ifneq ($(strip $(BUILD_VODSL)),)
	$(MAKE) -C $(BUILD_DIR)/userspace/MSTC/ZyIMS clean
endif
endif

ifneq ($(strip $(BUILD_DECT)),)
dectd_clean: sanity_check fssrc_clean 
	$(MAKE) -C $(BUILD_DIR)/userspace/private/apps/dectd clean
	find bcmdrivers/opensource/char/dectshim -name '*.ko'|xargs rm -f
	find bcmdrivers/opensource/char/dectshim -name '*.o'|xargs rm -f
	find bcmdrivers/opensource/char/dectshim -name '*.a'|xargs rm -f
	find bcmdrivers/opensource/char/dectshim -name '*.lib'|xargs rm -f
else
dectd_clean:
	@echo "Skipping dectd application (not configured)"
endif

ifneq ($(strip $(BUILD_MSTC_MODIFY)),)
voice_clean: sanity_check data-model_clean dectd_clean
else
voice_clean: sanity_check vodsl_clean data-model_clean dectd_clean
endif

ifneq ($(strip $(BUILD_VODSL)),)
	find bcmdrivers/broadcom/char/endpoint -name '*.ko'|xargs rm -f
	find bcmdrivers/broadcom/char/endpoint -name '*.o'|xargs rm -f
	find bcmdrivers/broadcom/char/endpoint -name '*.a'|xargs rm -f
	find bcmdrivers/broadcom/char/endpoint -name '*.lib'|xargs rm -f
	find bcmdrivers/broadcom/char/dspapp -name '*.o'|xargs rm -f
	find bcmdrivers/broadcom/char/dspapp -name '*.ko'|xargs rm -f
	find kernel/linux/eptlib -name '*.lib'|xargs rm -f
	find userspace/private -name '*voice.o'|xargs rm -f
endif
	rm -rf $(XCHANGE_DIR)/dslx/lib/LinuxKernel
	rm -rf $(XCHANGE_DIR)/dslx/obj/LinuxKernel
	rm -rf $(XCHANGE_DIR)/dslx/lib/LinuxUser
	rm -rf $(XCHANGE_DIR)/dslx/obj/LinuxUser
	rm -f $(KERNEL_DIR)/eptlib/*

slic_clean: sanity_check voice_clean
ifneq ($(strip $(BUILD_VODSL)),)
	find userspace/private/libs/cms_core/linux -name 'rut_voice.o' -exec rm -f "{}" ";"
	find userspace/private/libs/cms_core/linux -name 'rut_voice.d' -exec rm -f "{}" ";"
	find userspace/private/libs/cms_dal -name 'dal_voice.o' -exec rm -f "{}" ";"
	find userspace/private/libs/cms_dal -name 'dal_voice.d' -exec rm -f "{}" ";"
endif
	$(MAKE) -C data-model clean

wlan_clean:
	cd bcmdrivers/broadcom/net/wl;\
	files="\
		`find . -name 'build' | sed 's/tools\///' `\
		`find . -type l`\
		`find . -name '*.o'` \
		`find . -name '*.ko'`\
		`find . -name '*.oo'`\
		`find . -name '*.bin' ! -iname 'rtecdc.bin'`\
		`find . -name 'dummy.c'`\
		`find . -name 'epivers'`\
		`find . -name 'rver'`\
	";\
	for x in $$files; do\
		rm -rf $$x;\
	done;\
	cd $(BUILD_DIR)/targets;\
	rm -rf $(PROFILE)/fs.install/etc/wlan/*

###########################################
#
# Temporary kernel patching mechanism
#
###########################################

.PHONY: genpatch patch

genpatch:
	@hostTools/kup_tmp/genpatch

patch:
#	@hostTools/kup_tmp/patch

###########################################
#
# Get modules version
#
###########################################
.PHONY: version_info

version_info: sanity_check
ifeq ($(wildcard $(KERNEL_DIR)/.config),)
	$(call pre_kernelbuild)
endif
	@echo "$(MAKECMDGOALS):";\
	cd $(KERNEL_DIR); $(MAKE) --silent version_info;

###########################################
#
# System-wide exported variables
# (in alphabetical order)
#
###########################################


export \
ACTUAL_MAX_JOBS            \
BRCMAPPS                   \
BRCM_BOARD                 \
BRCM_DRIVER_PCI            \
BRCM_EXTRAVERSION          \
BRCM_KERNEL_NETQOS         \
BRCM_KERNEL_ROOTFS         \
BRCM_KERNEL_AUXFS_JFFS2    \
ifneq ($(strip $(BUILD_MSTC_MODIFY)),)	\
MSTC_NAND_BLOCK_16         \
INC_NAND_FLASH_DRIVER      \
endif			   \
BRCM_LDX_APP               \
BRCM_MIPS_ONLY_BUILD       \
BRCM_MIPS_ONLY_BUILD       \
BRCM_PSI_VERSION           \
BRCM_PTHREADS              \
BRCM_RAMDISK_BOOT_EN       \
BRCM_RAMDISK_SIZE          \
BRCM_NFS_MOUNT_EN          \
BRCM_RELEASE               \
BRCM_RELEASETAG            \
BRCM_SNMP                  \
BRCM_VERSION               \
BUILD_CMFCTL               \
BUILD_CMFVIZ               \
BUILD_CMFD                 \
BUILD_XDSLCTL              \
BUILD_XTMCTL               \
BUILD_VLANCTL              \
BUILD_BRCM_VLAN            \
BUILD_BRCTL                \
BUILD_BUSYBOX              \
BUILD_BUSYBOX_BRCM_LITE    \
BUILD_BUSYBOX_BRCM_FULL    \
BUILD_CERT                 \
BUILD_DDNSD                \
ifneq ($(strip $(BUILD_MSTC_MODIFY)),)	\
BUILD_DNSMASQ              \
endif			   \
BUILD_DEBUG_TOOLS          \
BUILD_DIAGAPP              \
BUILD_DIR                  \
BUILD_DNSPROBE             \
BUILD_DPROXY               \
BUILD_DPROXYWITHPROBE      \
BUILD_DYNAHELPER           \
BUILD_DNSSPOOF             \
BUILD_EBTABLES             \
BUILD_EPITTCP              \
BUILD_ETHWAN               \
ifneq ($(strip $(BUILD_MSTC_MODIFY)),)	\
BUILD_MSTC_WWAN            \
endif			   \
BUILD_FTPD                 \
BUILD_FTPD_STORAGE         \
BUILD_MCAST_PROXY          \
BUILD_WLHSPOT              \
BUILD_IPPD                 \
BUILD_IPROUTE2             \
BUILD_IPSEC_TOOLS          \
BUILD_L2TPAC               \
BUILD_IPTABLES             \
BUILD_WPS_BTN              \
ifneq ($(strip $(BUILD_MSTC_MODIFY)),)		\
BUILD_MSTC_WPS_BTN_PER          \
BUILD_MSTC_WLAN_WPS_BTN_SEPARATE		\
BUILD_MSTC_WPS_BTN_SCE          \
BUILD_MSTC_WPS_WLAN_ONE_LED     \
BUILD_MSTC_WLAN_BTN_PER         \
BUILD_MSTC_WPS_SPECIAL_CHAR_VERIFY		\
BUILD_MSTC_WLAN_CLICMD		\
BUILD_MSTC_WLAN_CHSCAN		\
endif				\
BUILD_LLTD                 \
BUILD_WSC                   \
BUILD_BCMCRYPTO \
BUILD_BCMSHARED \
BUILD_MKSQUASHFS           \
BUILD_NAS                  \
BUILD_NVRAM                \
BUILD_PORT_MIRRORING			 \
BUILD_PPPD                 \
PPP_AUTODISCONN			   \
BUILD_SES                  \
BUILD_SIPROXD              \
BUILD_SLACTEST             \
BUILD_SNMP                 \
BUILD_SNTP                 \
BUILD_SOAP                 \
BUILD_SOAP_VER             \
BUILD_SSHD                 \
BUILD_SSHD_MIPS_GENKEY     \
BUILD_TOD                  \
BUILD_TR64                 \
BUILD_TR64_DEVICECONFIG    \
BUILD_TR64_DEVICEINFO      \
BUILD_TR64_LANCONFIGSECURITY \
BUILD_TR64_LANETHINTERFACECONFIG \
BUILD_TR64_LANHOSTS        \
BUILD_TR64_LANHOSTCONFIGMGMT \
BUILD_TR64_LANUSBINTERFACECONFIG \
BUILD_TR64_LAYER3          \
BUILD_TR64_MANAGEMENTSERVER  \
BUILD_TR64_TIME            \
BUILD_TR64_USERINTERFACE   \
BUILD_TR64_QUEUEMANAGEMENT \
BUILD_TR64_LAYER2BRIDGE   \
BUILD_TR64_WANCABLELINKCONFIG \
BUILD_TR64_WANCOMMONINTERFACE \
BUILD_TR64_WANDSLINTERFACE \
BUILD_TR64_WANDSLLINKCONFIG \
BUILD_TR64_WANDSLCONNECTIONMGMT \
BUILD_TR64_WANDSLDIAGNOSTICS \
BUILD_TR64_WANETHERNETCONFIG \
BUILD_TR64_WANETHERNETLINKCONFIG \
BUILD_TR64_WANIPCONNECTION \
BUILD_TR64_WANPOTSLINKCONFIG \
BUILD_TR64_WANPPPCONNECTION \
BUILD_TR64_WLANCONFIG      \
BUILD_TR69C                \
BUILD_TR69_QUEUED_TRANSFERS \
BUILD_TR69C_SSL            \
BUILD_TR69_XBRCM           \
BUILD_TR69_UPLOAD          \
BUILD_TR69C_VENDOR_RPC     \
BUILD_OMCI                 \
BUILD_UDHCP                \
BUILD_UDHCP_RELAY          \
BUILD_UPNP                 \
BUILD_VCONFIG              \
BUILD_SUPERDMZ             \
ifneq ($(strip $(BUILD_MSTC_MODIFY)),)	\
BUILD_SIP_TLS              \
endif			   \
BUILD_WLCTL                \
BUILD_DHDCTL               \
BUILD_ZEBRA                \
BUILD_LIBUSB               \
BUILD_WANVLANMUX           \
HOSTTOOLS_DIR              \
INC_KERNEL_BASE            \
INSTALL_DIR                \
PROFILE_DIR                \
WEB_POPUP                  \
BUILD_VIRT_SRVR            \
BUILD_PORT_TRIG            \
BUILD_TR69C_BCM_SSL        \
BUILD_IPV6                 \
ifneq ($(strip $(BUILD_MSTC_MODIFY)),)	\
BUILD_MSTC_IPV6             \
endif			   \
BUILD_BOARD_LOG_SECTION    \
BRCM_LOG_SECTION_SIZE      \
BRCM_FLASHBLK_SIZE         \
BRCM_AUXFS_PERCENT         \
BRCM_BACKUP_PSI            \
LINUX_KERNEL_USBMASS       \
BUILD_IPSEC                \
BUILD_MoCACTL              \
BUILD_MoCACTL2             \
BUILD_6802_MOCA            \
BUILD_GPON                 \
BUILD_GPONCTL              \
BUILD_PMON                 \
BUILD_BUZZZ                \
BUILD_BOUNCE               \
BUILD_HELLO                \
BUILD_SPUCTL               \
BUILD_PWRCTL               \
BUILD_RNGD                 \
RELEASE_BUILD              \
NO_PRINTK_AND_BUG          \
FLASH_NAND_BLOCK_16KB      \
FLASH_NAND_BLOCK_128KB     \
FLASH_NAND_BLOCK_256KB     \
FLASH_NAND_BLOCK_512KB     \
FLASH_NAND_BLOCK_1024KB     \
FLASH_NAND_BLOCK_2056KB     \
BRCM_SCHED_RT_RUNTIME      \
BRCM_CONFIG_HIGH_RES_TIMERS \
BRCM_SWITCH_SCHED_SP        \
BRCM_SWITCH_SCHED_WRR       \
BUILD_SWMDK                 \
BUILD_IQCTL                 \
BUILD_BPMCTL                \
ifneq ($(strip $(BUILD_MSTC_MODIFY)),)	\
BUILD_MSTC_MODIFY	   \
BUILD_MSTC_VCAUTOHUNT	   \
BUILD_MSTC_MACFILTER			\
BUILD_MSTC_LOG               \
BUILD_MSTC_SAVE_LOG_TO_FLASH \
BUILD_MSTC_EMAIL_NOTIFICATION               \
MSTC_P8021AG	   \
BUILD_MSTC_DHCP_61	   \
BUILD_MSTC_DHCP_125	   \
BUILD_MSTC_STATIC_DHCP_AUTO	   \
MSTC_RESTORE_BTN_PER      \
BUILD_MSTC_VLANAUTOHUNT   \
BUILD_MSTC_DHCP_IP_BY_MAC_HASH   \
BUILD_MSTC_GUEST_WLAN     \
BUILD_MSTC_AUTO_SCHEDULING \
MSTC_DDNS_INADYN          \
BUILD_MSTC_RFC6204        \
MSTC_DDNS_EZ_IPUPDATE\
BUILD_MSTC_LINKSTATUS_HISTORY\
endif			    \
BUILD_EPONCTL               \
BUILD_ETHTOOL               \
BUILD_TMS                  \
IMAGE_VERSION               \
TOOLCHAIN_VER               \
TOOLCHAIN_PREFIX            \
PROFILE_KERNEL_VER          \
KERNEL_LINKS_DIR            \
LINUX_VER_STR               \
KERNEL_DIR                  \
FORCE                       \
BUILD_VLAN_AGGR             \
BUILD_DPI                   \
BRCM_KERNEL_DEBUG           \
BUILD_BRCM_FTTDP            \
BRCM_FTTDP_USE_RGMII1       \
BUILD_MSTC_SFTP_SCP        \
BRCM_1905_FM
