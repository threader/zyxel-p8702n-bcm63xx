#!/bin/bash

# This script runs under fakeroot.  The fakeroot utility has 
# problems under 64-bit/multi-processor/preemptive kernel, so
# we run it only when necessary.

source $KERNEL_DIR/.config

# Create devices
# (Swited from device table to fakeroot for device nodes - always use makeDevs)
./makeDevs

# make root file system images for squashfs, jffs2 and ubifs

	#### SQUASHFS 
if [ "$BRCM_KERNEL_AUXFS_JFFS2" == "y" ] ; then
    chmod +w $TARGET_FS/etc/fstab
    echo -e "mtd:data\t/data\tjffs2\t,\t\t0\t0\n" >> $TARGET_FS/etc/fstab
if [ "$BUILD_SIK_PARTITION_FEATURE" == "y" ] ; then		
    echo -e "mtd:customer\t/customer\tjffs2\t,\t\t0\t0\n" >> $TARGET_FS/etc/fstab
fi	
    chmod -w $TARGET_FS/etc/fstab
fi

if [ "$BRCM_IKOS" = "y" ]; then
    $HOSTTOOLS_DIR/mksquashfs $TARGET_FS $PROFILE_DIR/rootfs.img -noappend
else
    $HOSTTOOLS_DIR/mksquashfs $TARGET_FS $PROFILE_DIR/rootfs.img -noappend -comp xz
fi

if [ "$BRCM_KERNEL_ROOTFS" = "all" ]; then

#### JFFS2 RootFS
        cp $KERNEL_DIR/vmlinux $PROFILE_DIR/.
        $STRIP --remove-section=.note --remove-section=.comment $PROFILE_DIR/vmlinux
        $OBJCOPY -O binary $PROFILE_DIR/vmlinux $PROFILE_DIR/vmlinux.bin
        $HOSTTOOLS_DIR/cmplzma -k -2 $PROFILE_DIR/vmlinux $PROFILE_DIR/vmlinux.bin $PROFILE_DIR/vmlinux.lz
        cp $PROFILE_DIR/../cfe/cfe${BRCM_CHIP_WVER}ram.bin $TARGET_FS/cferam.000
        cp $PROFILE_DIR/vmlinux.lz $TARGET_FS/.
        echo -e "/cferam.000" > $HOSTTOOLS_DIR/nocomprlist
        echo -e "/vmlinux.lz" >> $HOSTTOOLS_DIR/nocomprlist
        echo $IMAGE_VERSION > $TARGET_FS/etc/image_version
        if [ "$BRCM_KERNEL_AUXFS_JFFS2" != "y" ] ; then
           chmod +w $TARGET_FS/etc/fstab
           echo -e "mtd:data\t/data\tjffs2\t,\t\t0\t0\n" >> $TARGET_FS/etc/fstab
           chmod -w $TARGET_FS/etc/fstab
        fi

        if [ "$BUILD_NAND_IMG_BLKSIZE_16KB" = "y" ]; then
        $HOSTTOOLS_DIR/mkfs.jffs2 $BRCM_ENDIAN_FLAGS -p -n -e $FLASH_NAND_BLOCK_16KB -r $TARGET_FS -o $PROFILE_DIR/jffs2_rootfs16kb.img -N $HOSTTOOLS_DIR/nocomprlist
        fi
        if [ "$BUILD_NAND_IMG_BLKSIZE_128KB" = "y" ]; then
        $HOSTTOOLS_DIR/mkfs.jffs2 $BRCM_ENDIAN_FLAGS -p -n -e $FLASH_NAND_BLOCK_128KB -r $TARGET_FS -o $PROFILE_DIR/jffs2_rootfs128kb.img -N $HOSTTOOLS_DIR/nocomprlist
        fi
        if [ "$BUILD_NAND_IMG_BLKSIZE_256KB" = "y" ]; then
        $HOSTTOOLS_DIR/mkfs.jffs2 $BRCM_ENDIAN_FLAGS -p -n -e $FLASH_NAND_BLOCK_256KB -r $TARGET_FS -o $PROFILE_DIR/jffs2_rootfs256kb.img -N $HOSTTOOLS_DIR/nocomprlist
        fi
        if [ "$BUILD_NAND_IMG_BLKSIZE_512KB" = "y" ]; then
        $HOSTTOOLS_DIR/mkfs.jffs2 $BRCM_ENDIAN_FLAGS -p -n -e $FLASH_NAND_BLOCK_512KB -r $TARGET_FS -o $PROFILE_DIR/jffs2_rootfs512kb.img -N $HOSTTOOLS_DIR/nocomprlist
        fi
        if [ "$BUILD_NAND_IMG_BLKSIZE_1024KB" = "y" ]; then
        $HOSTTOOLS_DIR/mkfs.jffs2 $BRCM_ENDIAN_FLAGS -p -n -e $FLASH_NAND_BLOCK_1024KB -r $TARGET_FS -o $PROFILE_DIR/jffs2_rootfs1024kb.img -N $HOSTTOOLS_DIR/nocomprlist
        fi

        if [ "$BUILD_SECURE_BOOT" = "y" ]; then
            $HOSTTOOLS_DIR/SecureBootUtils/makeEncryptedCfeRam $BRCM_CHIP $PROFILE_DIR
            mv $PROFILE_DIR/../cfe/cfesec${BRCM_CHIP}ram.bin $TARGET_FS/secram.000
            echo -e "/secram.000" >> $HOSTTOOLS_DIR/nocomprlist
            $HOSTTOOLS_DIR/SecureBootUtils/makeVmlinuxSig $PROFILE_DIR
            cp $PROFILE_DIR/vmlinux.sig $TARGET_FS/.
            echo -e "/vmlinux.sig" >> $HOSTTOOLS_DIR/nocomprlist

            if [ "$BUILD_NAND_IMG_BLKSIZE_16KB" = "y" ]; then
                $HOSTTOOLS_DIR/mkfs.jffs2 $BRCM_ENDIAN_FLAGS -p -n -e $FLASH_NAND_BLOCK_16KB -r $TARGET_FS -o $PROFILE_DIR/jffs2_rootfs16kb_secureboot.img -N $HOSTTOOLS_DIR/nocomprlist
            fi
            if [ "$BUILD_NAND_IMG_BLKSIZE_128KB" = "y" ]; then
                $HOSTTOOLS_DIR/mkfs.jffs2 $BRCM_ENDIAN_FLAGS -p -n -e $FLASH_NAND_BLOCK_128KB -r $TARGET_FS -o $PROFILE_DIR/jffs2_rootfs128kb_secureboot.img -N $HOSTTOOLS_DIR/nocomprlist
            fi
            if [ "$BUILD_NAND_IMG_BLKSIZE_256KB" = "y" ]; then
                $HOSTTOOLS_DIR/mkfs.jffs2 $BRCM_ENDIAN_FLAGS -p -n -e $FLASH_NAND_BLOCK_256KB -r $TARGET_FS -o $PROFILE_DIR/jffs2_rootfs256kb_secureboot.img -N $HOSTTOOLS_DIR/nocomprlist
            fi
            if [ "$BUILD_NAND_IMG_BLKSIZE_512KB" = "y" ]; then
                $HOSTTOOLS_DIR/mkfs.jffs2 $BRCM_ENDIAN_FLAGS -p -n -e $FLASH_NAND_BLOCK_512KB -r $TARGET_FS -o $PROFILE_DIR/jffs2_rootfs512kb_secureboot.img -N $HOSTTOOLS_DIR/nocomprlist
            fi
            if [ "$BUILD_NAND_IMG_BLKSIZE_1024KB" = "y" ]; then
                $HOSTTOOLS_DIR/mkfs.jffs2 $BRCM_ENDIAN_FLAGS -p -n -e $FLASH_NAND_BLOCK_1024KB -r $TARGET_FS -o $PROFILE_DIR/jffs2_rootfs1024kb_secureboot.img -N $HOSTTOOLS_DIR/nocomprlist
            fi
        fi


#### JFFS2 BootFS/UBI RootFS
        # Create boot file system dir
        rm -rf $TARGET_BOOTFS
        mkdir $TARGET_BOOTFS
        chmod 777 $TARGET_BOOTFS
        mv $TARGET_FS/cferam.000 $TARGET_BOOTFS/.
        mv $TARGET_FS/vmlinux.lz $TARGET_BOOTFS/.
        mkdir $TARGET_FS/bootfs
        mkdir $TARGET_BOOTFS/etc
        cp $TARGET_FS/etc/image_version $TARGET_BOOTFS/etc/image_version
        chmod +w $TARGET_FS/etc/fstab
        echo -e "mtd:bootfs\t/bootfs\tjffs2\tro\t\t0\t0\n" >> $TARGET_FS/etc/fstab
        chmod -w $TARGET_FS/etc/fstab
        echo -e "[ubifs]"                 > $PROFILE_DIR/ubi.ini
        echo -e "mode=ubi"               >> $PROFILE_DIR/ubi.ini
        echo -e "image=$PROFILE_DIR/rootfs.ubifs" >> $PROFILE_DIR/ubi.ini
        echo -e "vol_id=0"               >> $PROFILE_DIR/ubi.ini
        echo -e "vol_type=dynamic"       >> $PROFILE_DIR/ubi.ini
        echo -e "vol_name=rootfs_ubifs"  >> $PROFILE_DIR/ubi.ini
        echo -e "vol_flags=autoresize"   >> $PROFILE_DIR/ubi.ini

        # -e == --lebsize = blocksize - 2xpagesize
        if [ "$BUILD_NAND_IMG_BLKSIZE_16KB" = "y" ]; then
            $HOSTTOOLS_DIR/mkfs.jffs2 $BRCM_ENDIAN_FLAGS -p -n -e $FLASH_NAND_BLOCK_16KB -r $TARGET_BOOTFS -o $PROFILE_DIR/bootfs16kb.img -N $HOSTTOOLS_DIR/nocomprlist
            $HOSTTOOLS_DIR/mtd-utils*/mkfs.ubifs/mkfs.ubifs  -v -c 2048 -m 512 -e 15360 -x zlib -r $TARGET_FS -o $PROFILE_DIR/rootfs.ubifs
            $HOSTTOOLS_DIR/mtd-utils*/ubi-utils/ubinize -v -o $PROFILE_DIR/ubi_rootfs16kb.img -m 512 -p $FLASH_NAND_BLOCK_16KB $PROFILE_DIR/ubi.ini
        fi

        if [ "$BUILD_NAND_IMG_BLKSIZE_128KB" = "y" ]; then
            $HOSTTOOLS_DIR/mkfs.jffs2 $BRCM_ENDIAN_FLAGS -p -n -e $FLASH_NAND_BLOCK_128KB -r $TARGET_BOOTFS -o $PROFILE_DIR/bootfs128kb.img -N $HOSTTOOLS_DIR/nocomprlist
            if [ "$BRCM_CHIP" = "68500" ]; then
                $HOSTTOOLS_DIR/mtd-utils*/mkfs.ubifs/mkfs.ubifs  -v -c 2048 -m 2048 -e 129024 -x zlib -r $TARGET_FS -o $PROFILE_DIR/rootfs.ubifs
                $HOSTTOOLS_DIR/mtd-utils*/ubi-utils/ubinize -v -o $PROFILE_DIR/ubi_rootfs128kb.img -m 2048 -s 512 -p $FLASH_NAND_BLOCK_128KB $PROFILE_DIR/ubi.ini
            else
                $HOSTTOOLS_DIR/mtd-utils*/mkfs.ubifs/mkfs.ubifs  -v -c 2048 -m 2048 -e 126976 -x zlib -r $TARGET_FS -o $PROFILE_DIR/rootfs.ubifs
                $HOSTTOOLS_DIR/mtd-utils*/ubi-utils/ubinize -v -o $PROFILE_DIR/ubi_rootfs128kb.img -m 2048 -p $FLASH_NAND_BLOCK_128KB $PROFILE_DIR/ubi.ini
            fi
        fi

        if [ "$BUILD_NAND_IMG_BLKSIZE_256KB" = "y" ]; then
            $HOSTTOOLS_DIR/mkfs.jffs2 $BRCM_ENDIAN_FLAGS -p -n -e $FLASH_NAND_BLOCK_256KB -r $TARGET_BOOTFS -o $PROFILE_DIR/bootfs256kb.img -N $HOSTTOOLS_DIR/nocomprlist
            $HOSTTOOLS_DIR/mtd-utils*/mkfs.ubifs/mkfs.ubifs  -v -c 2048 -m 4096 -e 253952 -x zlib -r $TARGET_FS -o $PROFILE_DIR/rootfs.ubifs
            $HOSTTOOLS_DIR/mtd-utils*/ubi-utils/ubinize -v -o $PROFILE_DIR/ubi_rootfs256kb.img -m 4096 -p $FLASH_NAND_BLOCK_256KB $PROFILE_DIR/ubi.ini
        fi

        if [ "$BUILD_NAND_IMG_BLKSIZE_512KB" = "y" ]; then
            $HOSTTOOLS_DIR/mkfs.jffs2 $BRCM_ENDIAN_FLAGS -p -n -e $FLASH_NAND_BLOCK_512KB -r $TARGET_BOOTFS -o $PROFILE_DIR/bootfs512kb.img -N $HOSTTOOLS_DIR/nocomprlist
            $HOSTTOOLS_DIR/mtd-utils*/mkfs.ubifs/mkfs.ubifs  -v -c 2048 -m 4096 -e 516096 -x zlib -r $TARGET_FS -o $PROFILE_DIR/rootfs.ubifs
            $HOSTTOOLS_DIR/mtd-utils*/ubi-utils/ubinize -v -o $PROFILE_DIR/ubi_rootfs512kb.img -m 4096 -p $FLASH_NAND_BLOCK_512KB $PROFILE_DIR/ubi.ini
        fi

        if [ "$BUILD_NAND_IMG_BLKSIZE_1024KB" = "y" ]; then
            $HOSTTOOLS_DIR/mkfs.jffs2 $BRCM_ENDIAN_FLAGS -p -n -e $FLASH_NAND_BLOCK_1024KB -r $TARGET_BOOTFS -o $PROFILE_DIR/bootfs1024kb.img -N $HOSTTOOLS_DIR/nocomprlist
            $HOSTTOOLS_DIR/mtd-utils*/mkfs.ubifs/mkfs.ubifs  -v -c 2048 -m 4096 -e 1040384 -x zlib -r $TARGET_FS -o $PROFILE_DIR/rootfs.ubifs
            $HOSTTOOLS_DIR/mtd-utils*/ubi-utils/ubinize -v -o $PROFILE_DIR/ubi_rootfs1024kb.img -m 4096 -p $FLASH_NAND_BLOCK_1024KB $PROFILE_DIR/ubi.ini
        fi

        rm $PROFILE_DIR/rootfs.ubifs


        if [ "$BUILD_SECURE_BOOT" = "y" ]; then
           mv $TARGET_FS/secram.000 $TARGET_BOOTFS/.
           mv $TARGET_FS/vmlinux.sig $TARGET_BOOTFS/.

           if [ "$BUILD_NAND_IMG_BLKSIZE_16KB" = "y" ]; then
               $HOSTTOOLS_DIR/mkfs.jffs2 $BRCM_ENDIAN_FLAGS -p -n -e $FLASH_NAND_BLOCK_16KB -r $TARGET_BOOTFS -o $PROFILE_DIR/bootfs16kb_secureboot.img -N $HOSTTOOLS_DIR/nocomprlist
           fi
           if [ "$BUILD_NAND_IMG_BLKSIZE_128KB" = "y" ]; then
               $HOSTTOOLS_DIR/mkfs.jffs2 $BRCM_ENDIAN_FLAGS -p -n -e $FLASH_NAND_BLOCK_128KB -r $TARGET_BOOTFS -o $PROFILE_DIR/bootfs128kb_secureboot.img -N $HOSTTOOLS_DIR/nocomprlist
           fi
           if [ "$BUILD_NAND_IMG_BLKSIZE_256KB" = "y" ]; then
               $HOSTTOOLS_DIR/mkfs.jffs2 $BRCM_ENDIAN_FLAGS -p -n -e $FLASH_NAND_BLOCK_256KB -r $TARGET_BOOTFS -o $PROFILE_DIR/bootfs256kb_secureboot.img -N $HOSTTOOLS_DIR/nocomprlist
           fi
           if [ "$BUILD_NAND_IMG_BLKSIZE_512KB" = "y" ]; then
               $HOSTTOOLS_DIR/mkfs.jffs2 $BRCM_ENDIAN_FLAGS -p -n -e $FLASH_NAND_BLOCK_512KB -r $TARGET_BOOTFS -o $PROFILE_DIR/bootfs512kb_secureboot.img -N $HOSTTOOLS_DIR/nocomprlist
           fi
           if [ "$BUILD_NAND_IMG_BLKSIZE_1024KB" = "y" ]; then
               $HOSTTOOLS_DIR/mkfs.jffs2 $BRCM_ENDIAN_FLAGS -p -n -e $FLASH_NAND_BLOCK_1024KB -r $TARGET_BOOTFS -o $PROFILE_DIR/bootfs1024kb_secureboot.img -N $HOSTTOOLS_DIR/nocomprlist
           fi
        fi

        rm $HOSTTOOLS_DIR/nocomprlist
        rm $PROFILE_DIR/ubi.ini
fi

