#!/usr/bin/perl
use strict;
use warnings;
use FindBin qw($Bin);
use lib "$Bin/../../PerlLib";
use BRCM::GenConfig;

# $p will allow us to GET values from the PROFILE
# $c will allow us to SET (and GET and DRIVER_SETUP) on the config
# file as we transform it from a template to the final config

# arguments 
# * profile file
# * config  file
my $p    = new BRCM::GenConfig(shift);
my $chip = $p->get('BRCM_CHIP');
my $c    = new BRCM::GenConfig( shift, Chip => $chip, Profile => $p );


if ( $p->get('BRCM_KERNEL_ROOTFS') eq "nfs" ) {
    $c->set( 'BRCM_DRIVER_ETHERNET', 'y' );
}


$c->set( "CONFIG_BCM9$chip", 'y' );
$c->set( "CONFIG_BCM_BOARD", 'y' );
$c->set( "CONFIG_BCM_CHIP_NUMBER", $chip);
$c->driver_setup( "BOARD", "BOARD" );
if ( ! ($chip =~ /^(68500)$/) ) {
$c->set( "CONFIG_BCM_CHIPINFO", 'm' );
}
$c->driver_setup( "CHIPINFO", "CHIPINFO" );

if ( $p->get("BRCM_IKOS") ) {
    $c->unset("CONFIG_BCM_BOARD");
    $c->unset("CONFIG_BCM_CHIPINFO");
}


# if ( $chip =~ /^(63268|6318|6328|6362|6368)$/ ) {
$c->driver_setup( "XTM",  "XTMCFG" );
$c->driver_setup( "XTM",  "XTMRT" );
$c->driver_setup( "ADSL", "ADSL" );
if ( $chip eq '63268' ) {
    $c->set( "CONFIG_BCM_DSL_GINP_RTX", $p->get("BRCM_PHY_GINP_RTX") );
}
if ( $chip eq '63138' ) {
    $c->set( "CONFIG_BCM_DSL_TX_RX_IUDMA", $p->get("BRCM_DSL_TX_RX_IUDMA") );
}

# }


if ( $chip =~ /^(63268|6368)$/ ) {
    $c->driver_setup( "EXT_BONDING", "EXT_BONDING" );
}


$c->driver_setup( "ETHERNET", "ENET" );
if ( $p->get('BRCM_EXT_SWITCH') ) {
    $c->set( 'CONFIG_BCM_EXT_SWITCH',      'y' );
    $c->set( 'CONFIG_BCM_EXT_SWITCH_TYPE', $p->get('BRCM_EXT_SWITCH_TYPE') );
    if ( $p->get('BRCM_PORTS_ON_INT_EXT_SW') ) {
        $c->set( 'CONFIG_BCM_PORTS_ON_INT_EXT_SW', 'y');
    }
    if ( $p->get('BRCM_SWITCH_PORT_TRUNK_SUPPORT') ) {
        $c->set( 'CONFIG_BCM_SWITCH_PORT_TRUNK_SUPPORT', 'y');
    }
}
if ( $p->get('BRCM_PHY_54616') ) {
    $c->set( 'CONFIG_BCM_PHY_54616', 'y' );
}


if ( $chip eq '63268' ) {
    if ( $p->get("BRCM_GMAC") ) {
        $c->set( 'CONFIG_BCM_GMAC', 'y' );
    }
}


if ( $p->get('BCM_JUMBO_FRAME') ) {
    $c->set( 'CONFIG_BCM_JUMBO_FRAME', 'y' );
}

$c->driver_setup( 'VLAN',  'VLAN' );
if ( $p->get("BUILD_VLAN_AGGR") ) {
    $c->set( "CONFIG_BCM_VLAN_AGGREGATION",         "y" );
}

$c->driver_setup( 'USB',   'USB' );
$c->driver_setup( 'LOG',   'LOG' );
$c->driver_setup( 'LASER', 'LASER' );


$c->driver_setup( "TMS", "TMS" );
if ( $p->get("BUILD_TMS") ) {
    $c->set( "CONFIG_BCM_TMS", 'm' );
}



if ( $chip eq '6818' ) {
    $c->driver_setup( 'GPON', 'GPON' );

    $c->set( 'CONFIG_BCM_LASER', 'm' );


    if ( $p->get('BRCM_GPON_DDRO') ) {
        $c->set( 'CONFIG_BCM_GPON_DDRO',      'y' );
        $c->set( 'CONFIG_BCM_GPON_DDRO_SIZE', $p->get('BRCM_GPON_DDRO_SIZE') );
    }


    if ( $p->get("BCM_GPON_802_1Q_ENABLED") ) {
        $c->set( "CONFIG_BCM_GPON_802_1Q_ENABLED", "y" );
    }

    if ( $p->get("BCM_GPON_AE_AUTO_SWITCH") ) {
        $c->set( "CONFIG_BCM_GPON_AE_AUTO_SWITCH", "y" );
    }

}


if ( $chip =~ /^(6818|68500|6838)$/ ) {
    $c->set( "CONFIG_BCM_MAX_GEM_PORTS", $p->get("BCM_MAX_GEM_PORTS") );
}
else {
    $c->set( "CONFIG_BCM_MAX_GEM_PORTS", "32" );
}

if ( $chip =~ /^(6818|63268|63138|63148|6838)$/ ) {
    $c->driver_setup( "MoCA", "MoCA" );

    if ( $p->get("BUILD_6802_MOCA") ) {
        $c->set( "CONFIG_BCM_6802_MoCA", "y" );
    }

}


if ( $chip =~ /^(6818|6828|6838|63148)$/ ) {
    $c->driver_setup( "I2C", "I2C_BUS" );
    $c->driver_setup( "I2C", "I2C_CHIP" );
    if ( $p->get("BRCM_DRIVER_I2C") ) {
        $c->set( "CONFIG_I2C",         "y" );
        $c->set( "CONFIG_I2C_CHARDEV", "y" );
    }

}


if ( $chip =~ /^(63268|6828|6362|6368|6818)$/ ) {
    $c->driver_setup( "SPU",  "SPU" );
    $c->driver_setup( "TRNG", "TRNG" );
}
$c->driver_setup( "PWRMNGT", "PWRMNGT" );


if ( $chip =~ /^(63268|6318|6828|6362|6328|63381)$/ ) {
    $c->driver_setup( "ARL", "ARL" );
}


# FIXME -- do we ever need to take the default from the template?
if ( my $i = $p->get("BCM_DEF_NR_RX_DMA_CHANNELS") ) {
    $c->set( "CONFIG_BCM_DEF_NR_RX_DMA_CHANNELS", $i );
}
if ( my $i = $p->get("BCM_DEF_NR_TX_DMA_CHANNELS") ) {
    $c->set( "CONFIG_BCM_DEF_NR_TX_DMA_CHANNELS", $i );
}


if ( $chip eq '6828' ) {
    $c->driver_setup( "EPON", "EPON" );

    if ( $p->get("BRCM_EPON_LASER_SUPPORT") ) {
        $c->set( "CONFIG_BCM_LASER",    "m" );    # FIXME -- redundant
        $c->set( "CONFIG_BCM_I2C_CHIP", "m" );
        $c->set( "CONFIG_I2C",          "y" );
        $c->unset("CONFIG_I2C_HELPER_AUTO");
        $c->set( "CONFIG_GENERIC_GPIO", "y" );
        $c->set( "CONFIG_I2C_GPIO",     "y" );
        $c->set( "CONFIG_I2C_ALGOBIT",  "y" );
    }
}

if ( $p->get("BUILD_EPON_SDK") ) {
    $c->set( "CONFIG_EPON_SDK", "y" );
    if ( $p->get("BUILD_EPON_SDK_VOICE_OAM") ) {
        $c->set( "CONFIG_EPON_SDK_VOICE_OAM", "y" );
    }
    if ( my $i = $p->get("EPON_ONU_TYPE") ) {
        $c->set( "CONFIG_$i", "y" );
    }
    if ( $p->get("EPON_UNI_UNI_ENABLED") ) {
        $c->set( "CONFIG_EPON_UNI_UNI_ENABLED", "y" );
    }
    if ( $p->get("EPON_DS_DLF_FORWARD") ) {
        $c->set( "CONFIG_EPON_DS_DLF_FORWARD", "y" );
    }

}

if ( $p->get("BRCM_EPON_STACK") ) {
    $c->set( "CONFIG_BCM_EPON_STACK", "m" );
    if ( my $i = $p->get("BRCM_EPON_STACK_IMPL") ) {
        $c->set( "CONFIG_BCM_EPON_STACK_IMPL", $i );
    }
    if ( $p->get("EPON_CLOCK_TRANSPORT") ) {
    		$c->set( "CONFIG_EPON_CLOCK_TRANSPORT", "y" );
    }
}

$c->driver_setup( "PKTFLOW", "PKTFLOW" );
if ( $p->get("BRCM_DRIVER_PKTFLOW") ) {
    $c->set( "CONFIG_BLOG",       'y' );
    $c->set( "CONFIG_BLOG_IPV6",  $p->get("BRCM_DRIVER_PKTFLOW_IPV6") );
    $c->set( "CONFIG_BLOG_MCAST", $p->get("BRCM_DRIVER_PKTFLOW_MCAST") );
    $c->set( "CONFIG_BLOG_GRE",   $p->get("BRCM_DRIVER_PKTFLOW_GRE") );
    if ( $p->get("BRCM_DRIVER_PKTFLOW_FEATURE") ) {
        $c->set( "CONFIG_BLOG_FEATURE",              "y" );
        $c->set( "CONFIG_NETFILTER_XT_MATCH_LENGTH", "y" );
    }
    if ( $chip =~ /^(63148|63138|6368|6818|63268|6362|6828|68500|6838)$/ ) {
        $c->set( "CONFIG_BCM_FHW", "y" );
    }
    $c->setup_impl("FHW");
    if ( $chip =~ /^(6368|6818)$/ ) {
        $c->set( "CONFIG_BCM_PKTCMF", "m" );
    }
    $c->setup_impl("PKTCMF");
    if ( $chip =~ /^(68500|63148|63138|6838)$/ ) {
        $c->driver_setup( "PKTRUNNER", "PKTRUNNER" );

        if ( $chip =~ /^(63148|63138)$/ ) {
            if ( $p->get("BRCM_DRIVER_PKTRUNNER_GSO") ) {
                $c->set( "CONFIG_BCM_PKTRUNNER_GSO",  "y" );
            }
        }
    }
}


$c->driver_setup( "FAP", "FAP" );
if ( $p->get("BRCM_DRIVER_FAP")) {
    if ( $p->get("BRCM_DRIVER_BPM")) {
        $c->set( "CONFIG_BCM_FAP_GSO", $p->get("BRCM_DRIVER_FAP_GSO") );
        if ( $p->get("BRCM_DRIVER_FAP_GSO")) {
            $c->set( "CONFIG_BCM_FAP_GSO_LOOPBACK", $p->get("BRCM_DRIVER_FAP_GSO_LOOPBACK"));
        }
    }

    if ( $p->get("BRCM_DRIVER_FAP_LAYER2") ) {
        $c->set( "CONFIG_BCM_FAP_LAYER2", "y" );
    }
    if ( $p->get("BRCM_DRIVER_PKTFLOW_IPV6") && $p->get("BUILD_IPV6") ) {
        $c->set( "CONFIG_BCM_FAP_IPV6",  "y" );
    }
}

if ( $chip =~ /^(63268|6318|6828|6362|6328|6368|6818|60333|63381)$/ ) {
    print "\e[0;31m PKTDMA Build Enabled \e[0m\n";
    $c->set( "CONFIG_BCM_PKTDMA", "y" );
}
elsif ( $chip =~ /^(63138)$/ ) {
    if ( $p->get("BRCM_DSL_TX_RX_IUDMA") ) {
        print "\e[0;31m PKTDMA Build Enabled \e[0m\n";
        $c->set( "CONFIG_BCM_PKTDMA", "y" );
    }
}

# setup_impl is only to emulate the logic of old gendefconifg --
# FIXME -- remove setup_impl aftre transition is done
$c->setup_impl("PKTDMA");

$c->driver_setup( "FBOND", "FBOND" );

$c->driver_setup( "SPU",      "SPU" );
$c->driver_setup( "SPU_TEST", "SPU_TEST" );    # IMPL doesn't matter


$c->driver_setup( "INGQOS", "INGQOS" );


$c->driver_setup( "BPM", "BPM" );
$c->set( "CONFIG_BCM_BPM_BUF_MEM_PRCNT", $p->get("BRCM_BUF_MEM_PRCNT") );
 
# $c->driver_setup("PWRMNGT","PWRMNGT"); # FIXME - Duplicate


$c->set( "CONFIG_BCM_CPLD1",    $p->get("BRCM_STANDBY") );
$c->set( "CONFIG_BCM_PLC_BOOT", $p->get("BUILD_HOMEPLUG") );
if ( $p->get("BRCM_DRIVER_TRNG") ) {
    $c->driver_setup( "TRNG", "TRNG" );
    $c->set( "CONFIG_HW_RANDOM", "m" );
}

$c->set( "CONFIG_BCM_IEEE1905", $p->get("BUILD_IEEE1905") );

$c->driver_setup( "ISDN", "ISDN" );
if ( $p->get("BRCM_DRIVER_ISDN") ) {
    $c->set( "CONFIG_BCM_ISDN",             "y" );
    $c->set( "CONFIG_ISDN",                 "m" );
    $c->set( "CONFIG_ISDN_CAPI",            "m" );
    $c->set( "CONFIG_ISDN_CAPI_MIDDLEWARE", "y" );
    $c->set( "CONFIG_ISDN_CAPI_CAPI20",     "m" );
}

# SECTION: 
$c->driver_setup( "BCMDSP", "BCMDSP" );
$c->driver_setup( "PHONE",  "ENDPOINT" );
$c->driver_setup( "PCMSHIM",  "PCMSHIM" );
if ( $chip =~ /^(63268|6828|6362|63138|63148)$/ ) {
    $c->driver_setup( "DECT",     "DECT" );
    $c->driver_setup( "DECTSHIM", "DECTSHIM" );
}


$c->driver_setup( "BCMPROF", "BCMPROF" );
$c->driver_setup( "PROCFS",  "PROCFS" );
$c->driver_setup( "P8021AG", "P8021AG" );
$c->driver_setup( "SERIAL",  "SERIAL" );
if ( $p->get("BRCM_DRIVER_SERIAL") ) {
    $c->set( "CONFIG_BCM_SERIAL_CONSOLE", "y" );
}


if ( $p->get("BRCM_KTOOLS") ) {
    $c->set( "CONFIG_BRCM_KTOOLS", "y" );
}

if ( $p->get("BUILD_BALOO") ) {
    $c->set( "CONFIG_BALOO", 'y' );
    if ( $p->get("BALOO_PERFCTRS") ) {
        $c->set( "CONFIG_BALOO_PERFCTRS", 'y' );
    }
}

if ( $p->get("BUILD_BUZZZ") ) {
    $c->set( "CONFIG_BUZZZ", 'y' );
	if ( $p->get("BUZZZ_FUNC") ) {
		$c->set( "CONFIG_BUZZZ_FUNC", "y" );
	}
	if ( $p->get("BUZZZ_PMON") ) {
		$c->set( "CONFIG_BUZZZ_PMON", "y" );
	}
	if ( $p->get("BUZZZ_KEVT") ) {
		$c->set( "CONFIG_BUZZZ_KEVT", "y" );
	}
}

$c->set( "CONFIG_PMON", $p->get("BRCM_PMON") );

if ( $p->get("BRCM_BOUNCE") ) {
    $c->set( "CONFIG_BRCM_BOUNCE", "y" );
    if ( $p->get("BRCM_BOUNCE_EXIT") ) {
        $c->set( "CONFIG_BRCM_BOUNCE_EXIT", "y" );
    }
    if ( $p->get("BRCM_BOUNCE_DATAPATH") ) {
        $c->set( "CONFIG_BRCM_BOUNCE_DATAPATH", "y" );
    }
}


if ( $p->get("BRCM_KERNEL_FTRACE") ) {
    $c->set(
        [
            qw[
              CONFIG_TRACEPOINTS CONFIG_MARKERS
              CONFIG_NOP_TRACER CONFIG_TRACER_MAX_TRACE CONFIG_RING_BUFFER
              CONFIG_TRACING CONFIG_SCHED_TRACER CONFIG_CONTEXT_SWITCH_TRACER
              CONFIG_EVENT_TRACER CONFIG_BINARY_PRINTF
              ]
        ],
        'y'
    );
}

if ( $p->get("BRCM_KERNEL_PREEMPTIRQSOFF_TRACE") ) {
    $c->set(
        [
            qw[
              CONFIG_IRQSOFF_TRACER CONFIG_PREEMPT_TRACER
              ]
        ],
        'y'
    );
}

if ( $p->get("BRCM_KERNEL_FUNCTION_TRACE") ) {
    $c->set(
        [
            qw[
              CONFIG_FUNCTION_TRACER CONFIG_FUNCTION_GRAPH_TRACER
              CONFIG_STACKTRACE
              ]
        ],
        'y'
    );
}


$c->set( "CONFIG_KALLSYMS", $p->get("BRCM_KERNEL_KALLSYMS") );
if ( $p->get("BRCM_KERNEL_DEBUG") ) {
    $c->set( "CONFIG_REMOTE_DEBUG", "y" );
    $c->set( "CONFIG_GDB_CONSOLE",  "y" );
}
$c->set( "CONFIG_BCM_COLORIZE_PRINTS", $p->get("BCM_COLORIZE_PRINTS") );
$c->set( "CONFIG_BCM_ASSERTS",         $p->get("BCM_ASSERTS") );
$c->set( "CONFIG_BCM_FATAL_ASSERTS",   $p->get("BCM_FATAL_ASSERTS") );
$c->set( "CONFIG_DEBUG_KERNEL",        $p->get("BCM_KERNEL_HACKING") );


if ( $p->get("BCM_DEBUG_SPINLOCK") ) {
    $c->set( "CONFIG_DEBUG_SPINLOCK",       "y" );
    $c->set( "CONFIG_DEBUG_SPINLOCK_SLEEP", "y" );
}
$c->set( "CONFIG_DEBUG_MUTEXES", $p->get("BCM_DEBUG_MUTEXES") );
$c->set( "CONFIG_RCU_CPU_STALL_DETECTOR",
    $p->get("BCM_RCU_CPU_STALL_DETECTOR") );
$c->set( "CONFIG_DEBUG_PREEMPT", $p->get("BCM_DEBUG_PREEMPT") );
$c->set( "CONFIG_SCHEDSTATS",    $p->get("BCM_SCHEDSTATS") );
$c->set( "CONFIG_SCHED_DEBUG",   $p->get("BCM_SCHED_DEBUG") );
if ( $p->get("BCM_BCM_SCHEDAUDIT") ) {
    $c->set( "CONFIG_BCM_SCHEDAUDIT", "y" );

    # $c->set( "CONFIG_BCM_TSTAMP",     "y" );
}
$c->set( "CONFIG_MAGIC_SYSRQ", $p->get("BCM_MAGIC_SYSRQ") );


$c->set( "CONFIG_BRCM_VMTOOLS", $p->get("BRCM_KERNEL_VMTOOLS") );
$c->set( "CONFIG_BRCM_CSTAT",   $p->get("BRCM_KERNEL_CSTAT") );
if ( $p->get("ENABLE_APP_COREDUMPS") ) {
    $c->set( "CONFIG_ELF_CORE",                      "y" );
    $c->set( "CONFIG_CORE_DUMP_DEFAULT_ELF_HEADERS", "y" );
}

if ( $p->get("BRCM_IKOS") ) {
	$c->set( "CONFIG_BRCM_IKOS", 'y' );
}


if ( $p->get("BRCM_SMP_EN") ) {
    $c->set( "CONFIG_SMP", 'y' );
    $c->unset("CONFIG_KLOB");
    if ( $chip =~ /^(63138)$/ ) {
        $c->set( "CONFIG_PLAT_CA9_SMP", 'y' );
    }
    if ( $chip =~ /^(63148)$/ ) {
        $c->set( "CONFIG_PLAT_B15_SMP", 'y' );
    }
}
if ( $p->get("BRCM_KERNEL_PREEMPT") ) {
    $c->unset("CONFIG_PREEMPT_NONE");
    $c->unset("CONFIG_PREEMPT_VOLUNTARY");
    # 3.4 specific lines:
    $c->set( "CONFIG_PREEMPT__LL", 'y' );
    $c->unset("CONFIG_PREEMPT_RTB");
    $c->unset("CONFIG_PREEMPT_RT_FULL");
    $c->set("CONFIG_BCM_PRINTK_INT_ENABLED", 'y');
}
$c->set( "CONFIG_BCM_SCHED_RT_PERIOD",  $p->get("BRCM_SCHED_RT_PERIOD") );
$c->set( "CONFIG_BCM_SCHED_RT_RUNTIME", $p->get("BRCM_SCHED_RT_RUNTIME") );
$c->set( "CONFIG_HIGH_RES_TIMERS", $p->get("BRCM_CONFIG_HIGH_RES_TIMERS") );
$c->set( "CONFIG_BCM_HARDIRQ_COUNT_CYCLES",
    $p->get("BCM_HARDIRQ_COUNT_CYCLES") );
if ( $p->get("BCM_CGROUPS") ) {
    $c->set(
        [
            qw[
              CONFIG_CGROUPS CONFIG_CGROUP_SCHED CONFIG_GROUP_SCHED CONFIG_FAIR_GROUP_SCHED CONFIG_RT_GROUP_SCHED
              CONFIG_RESOURCE_COUNTERS CONFIG_CGROUP_MEM_RES_CTLR CONFIG_MM_OWNER
              ]
        ],
        'y'
    );
}
$c->set( "CONFIG_CGROUP_BCM", $p->get("BCM_CGROUP_BCM") );


if ( $p->get("BRCM_KERNEL_CRYPTO") ) {
    $c->set(
        [
            qw[CONFIG_NET_KEY CONFIG_INET_AH CONFIG_INET_ESP
              CONFIG_INET_XFRM_TUNNEL CONFIG_INET_TUNNEL
              CONFIG_INET_XFRM_MODE_TRANSPORT
              CONFIG_INET_XFRM_MODE_TUNNEL CONFIG_XFRM_USER CONFIG_CRYPTO]
        ],
        'y'
    );
    foreach my $t (qw[HMAC NULL MD5 SHA1 DES AES]) {
        $c->set( "CONFIG_CRYPTO_$t", $p->get("BRCM_KERNEL_CRYPTO_$t") );
    }
}


if ( $p->get("BUILD_EBTABLES") ) {
    $c->set(
        [
            qw[
              CONFIG_BRIDGE_NF_EBTABLES CONFIG_BRIDGE_EBT_T_FILTER
              CONFIG_BRIDGE_EBT_T_NAT CONFIG_BRIDGE_EBT_BROUTE
              CONFIG_BRIDGE_EBT_IP CONFIG_BRIDGE_EBT_ARP CONFIG_BRIDGE_EBT_MARK			  
              CONFIG_BRIDGE_EBT_VLAN CONFIG_BRIDGE_EBT_TIME
              CONFIG_BRIDGE_EBT_MARK_T CONFIG_BRIDGE_EBT_FTOS_T
              CONFIG_BRIDGE_EBT_POLICER CONFIG_BRIDGE_EBT_AUTOMAP			  
              CONFIG_BRIDGE_EBT_SKIPLOG_T]
        ],
        'y'
    );
    if ( $p->get("BRCM_DRIVER_WIRELESS") ) {
        $c->set( "CONFIG_BRIDGE_EBT_WMM_MARK", 'y' );
    }
}


if ( $p->get("BUILD_MCAST_PROXY") ) {
    $c->set( "CONFIG_IP_MROUTE",    'y' );
    $c->set( "CONFIG_IP_MULTICAST", 'y' );
    if ( $p->get("BUILD_IPV6") ) {
        $c->set( "CONFIG_IPV6_MROUTE",   'y' );
        $c->set( "CONFIG_IPV6_PIMSM_V2", 'y' );
    }
}


if ( $p->get("BUILD_MCAST_SNOOP") ) {
    $c->set( "CONFIG_BR_IGMP_SNOOP", 'y' );

    #$c->set( "CONFIG_BR_IGMP_SNOOP_SWITCH_PATCH", 'y' );
    if ( $p->get("BUILD_IPV6") ) {
        $c->set( "CONFIG_BR_MLD_SNOOP", 'y' );
    }
}


if ( $p->get("BRCM_KERNEL_NETQOS") ) {
    $c->set(
        [
            qw[
              CONFIG_IFB CONFIG_NET_SCHED CONFIG_NET_SCH_CLK_JIFFIES
              CONFIG_NET_SCH_CBQ CONFIG_NET_SCH_HTB CONFIG_NET_SCH_PRIO
              CONFIG_NET_SCH_SFQ CONFIG_NET_SCH_TBF CONFIG_NET_SCH_DSMARK
              CONFIG_NET_SCH_INGRESS CONFIG_NET_QOS CONFIG_NET_ESTIMATOR
              CONFIG_NET_CLS CONFIG_NET_CLS_TCINDEX CONFIG_NET_CLS_ROUTE4
              CONFIG_NET_CLS_FW CONFIG_NET_CLS_IND
              CONFIG_NET_CLS_U32 CONFIG_NET_CLS_ACT CONFIG_NET_ACT_POLICE
              CONFIG_NET_ACT_GACT CONFIG_NET_ACT_MIRRED
              ]

              #CONFIG_NET_CLS_ROUTE
        ],
        'y'
    );
}


if ( $p->get("BUILD_DPI") ) {
    $c->set( "CONFIG_BRCM_DPI", 'y' );
}


if ( $p->get("BUILD_VCONFIG") || $p->get("BUILD_WANVLANMUX") ) {
    $c->set( "CONFIG_VLAN_8021Q", 'y' );
}

if ( $p->get("BUILD_ETHWAN") ) {

    #$c->set( "CONFIG_ETHWAN", 'y' );   # FIXME -- not in defconfig
}


if ( $p->get("BUILD_IPV6") ) {
    $c->set(
        [
            qw[
              CONFIG_IPV6 CONFIG_IPV6_TUNNEL
              CONFIG_IPV6_MULTIPLE_TABLES CONFIG_IPV6_SIT
              CONFIG_IPV6_SIT_6RD CONFIG_IPV6_ROUTER_PREF
              CONFIG_IP6_NF_TARGET_REJECT]
			###############################################################
			#Support RFC 6204, merge from CHT P880 phase 3, ref. R4554
			###############################################################
			# CONFIG_INET6_TUNNEL  is not in template
        ],
        'y'
    );
    $c->set(
        [
            qw[
              CONFIG_IP6_NF_IPTABLES CONFIG_IP6_NF_FILTER
              CONFIG_IP6_NF_MANGLE CONFIG_IP6_NF_RAW
              CONFIG_IP6_NF_QUEUE CONFIG_IP6_NF_TARGET_LOG
              CONFIG_NF_CONNTRACK_IPV6
              ]
        ],
        'm'
    );
    if ( $p->get("BRCM_KERNEL_CRYPTO") ) {
        $c->set(
            [
                qw[
                  CONFIG_INET6_AH CONFIG_INET6_ESP
                  CONFIG_INET6_XFRM_MODE_TRANSPORT
                  CONFIG_INET6_XFRM_MODE_TUNNEL]
            ],
            'y'
        );
    }
    if ( $p->get("BUILD_EBTABLES") ) {
        $c->set( "CONFIG_BRIDGE_EBT_IP6", 'y' );
    }

}


if ( $p->get("BUILD_IPROUTE2") ) {
    $c->set(
        [
            qw[CONFIG_IP_ADVANCED_ROUTER CONFIG_ASK_IP_FIB_HASH
              CONFIG_IP_MULTIPLE_TABLES CONFIG_IP_ROUTE_FWMARK]
        ],
        'y'
    );
}
elsif ( ( $chip eq '6818' ) && $p->get("BUILD_GPONRG_OMCI_FULL") ) {
    $c->set(
        [
            qw[CONFIG_IP_ADVANCED_ROUTER CONFIG_ASK_IP_FIB_HASH
              CONFIG_IP_MULTIPLE_TABLES]
        ],
        'y'
    );
}


if ( $p->get("BUILD_IPSEC_TOOLS") ) {

    # to emulate gendefconfig's logic,
    # make sure that "CONFIG_XFRM_USER" isn't already "y"
    $c->set( "CONFIG_XFRM_USER", 'm' ) unless $c->get("CONFIG_XFRM_USER");
    $c->set(
        [
            qw[
              CONFIG_XFRM CONFIG_XFRM_MIGRATE CONFIG_NET_KEY
              CONFIG_NET_KEY_MIGRATE
              ]
        ],
        'y'
    );
}

$c->set( "CONFIG_L2TP", $p->get("BUILD_L2TPAC") );
$c->set( "CONFIG_PPPOL2TP", $p->get("BUILD_L2TPAC") );
$c->set( "CONFIG_PPTP", $p->get("BUILD_PPTPAC") );

if ( !$p->get("ENABLE_PRINTK_AND_BUG") ) {
    $c->unset("CONFIG_PRINTK");
    $c->unset("CONFIG_BUG");
}

if ( my $i = $p->get("BCM_DEFAULT_CONSOLE_LOGLEVEL") ) {
    $c->set( "CONFIG_BCM_DEFAULT_CONSOLE_LOGLEVEL", $i );
}

$c->set( "CONFIG_PRINTK_TIME", $p->get("BCM_PRINTK_TIME") );

if ( my $i = $p->get("BRCM_MAX_BSD_PTP") ) {
    $c->set( "CONFIG_LEGACY_PTY_COUNT", $i );
}


if ( !$p->get("BCM_IUDMA_RX_SPLITTING") || ( $chip =~ /^(63268|6828)$/ ) ) {
    $c->unset("CONFIG_BCM_PKTDMA_RX_SPLITTING");
}
if ( !$p->get("BCM_IUDMA_TX_SPLITTING") || ( $chip =~ /^(63268|6828)$/ ) ) {
    $c->unset("CONFIG_BCM_PKTDMA_TX_SPLITTING");
}


foreach my $i (qw[OFF 16M 32M 64M]) {
    $c->set(
        "CONFIG_BRCM_MEMORY_RESTRICTION_$i",
        $p->get("BRCM_MEMORY_RESTRICTION_$i")
    );
}

$c->set( "CONFIG_BRCM_OLT_FPGA_RESTORE", $p->get("BUILD_GPONOLT_TEST_UTILS") );


if ( $p->get('BUILD_ATMWAN') ) {
    $c->set( 'CONFIG_ATM',                                   'y' );
}


if ( $p->get("BUILD_PPPD") ) {
    $c->set(
        [
            qw[CONFIG_PPP CONFIG_PPP_FILTER CONFIG_PPP_ASYNC CONFIG_PPP_SYNC_TTY
              CONFIG_PPP_DEFLATE CONFIG_PPP_BSDCOMP CONFIG_PPPOE CONFIG_SLHC]
        ],
        'y'
    );
}


$c->driver_setup( "BDMF", "BDMF" );
$c->driver_setup( "RDPA", "RDPA" );
$c->setup_impl("RDP");
$c->driver_setup( "RDPA_GPL", "RDPA_GPL" );
$c->driver_setup( "RDPETH_TEST", "RDPETH_TEST" );
$c->driver_setup( "RDPA_MW", "RDPA_MW" );
$c->driver_setup( "RDPA_DRV", "RDPA_DRV" );

if ( $chip =~ /^(68500|6838)$/ ) {
    $c->driver_setup( "GPON_STACK", "GPON_STACK" );
    $c->driver_setup( "RDPA_BRIDGE", "RDPA_BRIDGE" );
    $c->driver_setup( "GPON", "GPON" );
 if ( my $i = $p->get("GPON_ONU_TYPE") ) {
        $c->set( "CONFIG_$i", "y" );
    }
}

if ( $chip =~ /^(68500|6838|63138|63148|63268|6362)$/ ) {
    $c->driver_setup( "WIFI_FORWARDING_DRV", "WIFI_FORWARDING_DRV" );
    $c->driver_setup( "WFD_CHAIN_SUPPORT", "WFD_CHAIN_SUPPORT" );
}
if ( $chip =~ /^(6838|63148|63138|63381)$/ ) {
    $c->driver_setup( "PMC", "PMC" );
}

if ( $chip =~ /^(6838|63148|63138)$/ ) {
    $c->driver_setup( "EXT_TIMER", "EXT_TIMER" );
    $c->set( "CONFIG_TIMERFD", "y");    
}

if ( ! ($chip =~ /^(68500|6368|60333)$/) ) {
    $c->driver_setup( "WATCHDOG_TIMER", "WATCHDOG_TIMER" );
}

if ( $chip eq '6838' ) {
    $c->driver_setup( "SIM_CARD", "SIM_CARD" );
    $c->driver_setup( "PMD", "PMD" );
}

if ( $chip =~ /^(63138)$/ ) {
    if ( $p->get("BRCM_DRIVER_ACP") ) {
        $c->set( "CONFIG_PLAT_BCM63XX_ACP", "y" );
        $c->set( "CONFIG_BCM_ZONE_ACP", "y" );
        $c->set( 'CONFIG_BCM_ACP_MEM_SIZE', $p->get('BRCM_ACP_SIZE') );
    }
}


if ( $p->get('BUILD_ETHTOOL') ) {
    $c->set( 'CONFIG_EPOLL', 'y' );
}

# Time Synchronization
if ( $chip =~ /^(68500|6838)$/ ) {

    # Driver
    $c->driver_setup( "TIME_SYNC", "TIME_SYNC" );

    # GPON ToDD
    if ( $p->get( "BRCM_GPON_TODD" ) ) {
        $c->set( "CONFIG_BCM_GPON_TODD", "y" );
        $c->set( "CONFIG_BCM_TIME_SYNC_1PPS", "y" );
    }

    # PTP 1588
    if ( $p->get( "BRCM_PTP_1588" ) ) {
        $c->set( "CONFIG_BCM_PTP_1588", "y" );
    }
    
    # Sync Clock: 8KHz
    if ( $p->get( "BRCM_TIME_SYNC_8KHZ" ) ) {
        $c->set( "CONFIG_BCM_TIME_SYNC_8KHZ", "y" );
    }

    # Sync Signal: PON Unstable
    if ( $p->get( "BRCM_TIME_SYNC_PON_UNSTABLE" ) ) {
        $c->set( "CONFIG_BCM_TIME_SYNC_PON_UNSTABLE", "y" );
    }
}

# Presecure / Fullsecure targets
if ( $chip eq '6838' ) {
    $c->set( "CONFIG_BCM_OTP", 'm' );
    $c->driver_setup( "OTP", "OTP" );
}

# LAST LINE: ADD ABOVE!
$c->write( );

